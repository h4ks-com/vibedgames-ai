{
  "messages": [
    {
      "role": "user",
      "content": "user control random emoji directions with 'y' (up left), 'u' (up right), 'g' (left), 'h' (pass), 'j' (right), 'b' (down left), 'n' (down right); emoji initial position in upper left of screen; background image is https://picsum.photos/200/300\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Emoji Control</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            background-image: url('https://picsum.photos/200/300');\n            background-size: cover;\n            height: 100vh;\n            display: flex;\n            justify-content: flex-start;\n            align-items: flex-start;\n        }\n\n        #emoji {\n            font-size: 50px;\n            position: absolute;\n            top: 0;\n            left: 0;\n            transition: top 0.1s, left 0.1s;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"emoji\">ðŸ˜€</div>\n\n    <script>\n        const emoji = document.getElementById('emoji');\n        let position = { top: 0, left: 0 };\n\n        document.addEventListener('keydown', (event) => {\n            switch (event.key) {\n                case 'y': // up left\n                    position.top -= 10;\n                    position.left -= 10;\n                    break;\n                case 'u': // up right\n                    position.top -= 10;\n                    position.left += 10;\n                    break;\n                case 'g': // left\n                    position.left -= 10;\n                    break;\n                case 'h': // pass\n                    break;\n                case 'j': // right\n                    position.left += 10;\n                    break;\n                case 'b': // down left\n                    position.top += 10;\n                    position.left -= 10;\n                    break;\n                case 'n': // down right\n                    position.top += 10;\n                    position.left += 10;\n                    break;\n            }\n            updatePosition();\n        });\n\n        function updatePosition() {\n            emoji.style.top = position.top + 'px';\n            emoji.style.left = position.left + 'px';\n        }\n    </script>\n</body>\n\n</html>\n```"
    },
    {
      "role": "user",
      "content": "create levels\nMake sure everything is kept in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Emoji Control with Levels</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            background-image: url('https://picsum.photos/200/300');\n            background-size: cover;\n            height: 100vh;\n            display: flex;\n            justify-content: flex-start;\n            align-items: flex-start;\n            overflow: hidden;\n        }\n\n        #emoji {\n            font-size: 50px;\n            position: absolute;\n            top: 0;\n            left: 0;\n            transition: top 0.1s, left 0.1s;\n        }\n\n        #level {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            font-size: 20px;\n            color: white;\n            background: rgba(0, 0, 0, 0.5);\n            padding: 5px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"emoji\">ðŸ˜€</div>\n    <div id=\"level\">Level: 1</div>\n\n    <script>\n        const emoji = document.getElementById('emoji');\n        const levelDisplay = document.getElementById('level');\n        let position = { top: 0, left: 0 };\n        let level = 1;\n        const levelBoundary = 100; // Change this value to set the boundary for level completion\n\n        document.addEventListener('keydown', (event) => {\n            switch (event.key) {\n                case 'y': // up left\n                    position.top -= 10;\n                    position.left -= 10;\n                    break;\n                case 'u': // up right\n                    position.top -= 10;\n                    position.left += 10;\n                    break;\n                case 'g': // left\n                    position.left -= 10;\n                    break;\n                case 'h': // pass\n                    break;\n                case 'j': // right\n                    position.left += 10;\n                    break;\n                case 'b': // down left\n                    position.top += 10;\n                    position.left -= 10;\n                    break;\n                case 'n': // down right\n                    position.top += 10;\n                    position.left += 10;\n                    break;\n            }\n            updatePosition();\n            checkLevelCompletion();\n        });\n\n        function updatePosition() {\n            emoji.style.top = position.top + 'px';\n            emoji.style.left = position.left + 'px';\n        }\n\n        function checkLevelCompletion() {\n            if (position.top >= levelBoundary) {\n                level++;\n                levelDisplay.textContent = 'Level: ' + level;\n                position.top = 0; // Reset position for the next level\n                position.left = 0; // Reset position for the next level\n                updatePosition();\n            }\n        }\n    </script>\n</body>\n\n</html>\n``` \n\nIn this code, the game has levels that increase as the emoji reaches a certain vertical boundary (set by `levelBoundary`). When the emoji's top position reaches or exceeds this boundary, the level increases, and the emoji resets to the starting position. You can adjust the `levelBoundary` variable to change when a level is completed."
    }
  ]
}