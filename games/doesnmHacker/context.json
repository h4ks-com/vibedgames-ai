{
  "messages": [
    {
      "role": "user",
      "content": "a game where you use something as small as a mobile phone to install software and do hacker stuff totake down entire companies and governments\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Mobile Hacker Simulator</title>\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap');\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    margin: 0; padding: 0;\n    font-family: 'Roboto Mono', monospace;\n    background: #0a0a0a;\n    color: #33ff33;\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n  }\n  header {\n    background: #111;\n    padding: 10px 15px;\n    text-align: center;\n    font-size: 1.3rem;\n    border-bottom: 1px solid #0f0;\n    user-select: none;\n  }\n  main {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 15px;\n    gap: 10px;\n  }\n  #screen {\n    background: #020202;\n    border: 2px solid #0f0;\n    border-radius: 8px;\n    padding: 15px;\n    height: 370px;\n    overflow-y: auto;\n    font-size: 0.95rem;\n    line-height: 1.3rem;\n    white-space: pre-wrap;\n  }\n  #input-area {\n    display: flex;\n    gap: 10px;\n  }\n  #command {\n    flex: 1;\n    background: #111;\n    border: 2px solid #0f0;\n    border-radius: 5px;\n    padding: 10px;\n    font-family: 'Roboto Mono', monospace;\n    font-size: 1rem;\n    color: #33ff33;\n    outline: none;\n  }\n  #command::placeholder {\n    color: #0f0;\n  }\n  button {\n    background: #0f0;\n    border: none;\n    color: #000;\n    font-weight: 700;\n    padding: 0 15px;\n    border-radius: 5px;\n    cursor: pointer;\n    user-select: none;\n    transition: background 0.3s;\n  }\n  button:disabled {\n    background: #055005;\n    cursor: not-allowed;\n  }\n  button:hover:not(:disabled) {\n    background: #2f2;\n  }\n  footer {\n    font-size: 0.8rem;\n    color: #0f0;\n    text-align: center;\n    padding: 8px;\n    border-top: 1px solid #0f0;\n  }\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n  ::-webkit-scrollbar-thumb {\n    background: #0f0;\n    border-radius: 3px;\n  }\n  ::-webkit-scrollbar-track {\n    background: #020202;\n  }\n</style>\n</head>\n<body>\n<header>\n  Mobile Hacker Simulator\n</header>\n<main>\n  <div id=\"screen\" aria-live=\"polite\" aria-label=\"Game output\"></div>\n  <form id=\"input-area\" autocomplete=\"off\">\n    <input type=\"text\" id=\"command\" placeholder=\"Enter command...\" aria-label=\"Command input\" spellcheck=\"false\" autofocus />\n    <button type=\"submit\" id=\"submitBtn\">Run</button>\n  </form>\n</main>\n<footer>\n  Use commands like <code>install &lt;software&gt;</code>, <code>hack &lt;target&gt;</code>, <code>status</code>.\n</footer>\n<script>\n(() => {\n  const screen = document.getElementById('screen');\n  const form = document.getElementById('input-area');\n  const commandInput = document.getElementById('command');\n  const submitBtn = document.getElementById('submitBtn');\n\n  // Game state\n  let installedSoftware = {};\n  let hackedTargets = {};\n  let money = 5000;\n  let rank = 1;\n  let experience = 0;\n\n  // Software library\n  const softwareLibrary = {\n    'scanner': { cost: 1000, desc: 'Scans network for vulnerabilities.' },\n    'exploit-kits': { cost: 3000, desc: 'Contains exploits to hack targets.' },\n    'proxy': { cost: 2000, desc: 'Masks your identity during hacks.' },\n    'botnet': { cost: 7000, desc: 'Leverage bots to increase hack power.' },\n    'encryption': { cost: 2500, desc: 'Encrypt your communications to avoid detection.' },\n    'decrypter': { cost: 1500, desc: 'Decrypt encrypted data from targets.' },\n    'firewall-bypass': { cost: 4000, desc: 'Bypass firewalls of government & corp targets.' }\n  };\n\n  // Targets - companies and governments, each requires some software level\n  const targets = {\n    'smallcorp': {\n      security: 2,\n      money: 8000,\n      exp: 1200,\n      desc: 'Small Corporation with basic security systems.'\n    },\n    'medcorp': {\n      security: 4,\n      money: 16000,\n      exp: 2500,\n      desc: 'Medium Corporation with moderate defenses.'\n    },\n    'bigcorp': {\n      security: 7,\n      money: 40000,\n      exp: 6000,\n      desc: 'Large Corporation with advanced security protocols.'\n    },\n    'gov-local': {\n      security: 6,\n      money: 25000,\n      exp: 5000,\n      desc: 'Local Government Department with strong defenses.'\n    },\n    'gov-national': {\n      security: 9,\n      money: 70000,\n      exp: 12000,\n      desc: 'National Government with top-tier security.'\n    },\n    'military': {\n      security: 10,\n      money: 100000,\n      exp: 18000,\n      desc: 'Military government sector. Extremely secure.'\n    }\n  };\n\n  // Help message\n  const helpMessage = `\nCommands:\n  help                     - Show this help message\n  status                   - Show your status and installed software\n  shop                     - Show available software to install\n  install <software>       - Install software from shop (costs money)\n  uninstall <software>     - Uninstall software you have installed\n  hack <target>            - Attempt to hack target company/government\n  targets                  - List all possible hack targets with descriptions\n  clear                    - Clear screen\n  exit                     - Restart game`;\n\n  // Utility to append lines to screen\n  function print(text = '') {\n    screen.textContent += text + '\\n';\n    screen.scrollTop = screen.scrollHeight;\n  }\n\n  // Utility to print error lines with some style\n  function printError(text) {\n    print(`[Error] ${text}`);\n  }\n\n  // Reset game\n  function resetGame() {\n    installedSoftware = {};\n    hackedTargets = {};\n    money = 5000;\n    rank = 1;\n    experience = 0;\n    screen.textContent = '';\n    print(\"Welcome to Mobile Hacker Simulator!\");\n    print(\"You're a hacker with only a mobile phone and some crazy skills.\");\n    print(\"Use 'help' to see commands.\");\n    updatePrompt();\n  }\n\n  // Check if player has required software to hack target security level\n  function hasRequiredSoftware(securityLevel) {\n    // Sum of security bypass power from installed software\n    // Some software add to hack power:\n    // E.g. scanner(1), exploit-kits(3), proxy(2), botnet(4), encryption(2), decrypter(1), firewall-bypass(5)\n\n    const softwarePowerMap = {\n      'scanner': 1,\n      'exploit-kits': 3,\n      'proxy': 2,\n      'botnet': 4,\n      'encryption': 2,\n      'decrypter': 1,\n      'firewall-bypass': 5\n    };\n\n    let totalPower = 0;\n    for (const s in installedSoftware) {\n      if (softwarePowerMap[s]) totalPower += softwarePowerMap[s];\n    }\n    return totalPower >= securityLevel;\n  }\n\n  // Attempt hack procedure\n  function attemptHack(target) {\n    if (!targets[target]) {\n      printError(`Target '${target}' unknown.`);\n      return;\n    }\n    if (hackedTargets[target]) {\n      print(`You already took down '${target}'.`);\n      return;\n    }\n\n    const t = targets[target];\n\n    print(`Attempting hack on '${target}': ${t.desc}`);\n\n    // Must have the exploit-kits software installed for any hack\n    if (!installedSoftware['exploit-kits']) {\n      printError(\"Hack failed: You need 'exploit-kits' installed to hack targets.\");\n      return;\n    }\n\n    if (!hasRequiredSoftware(t.security)) {\n      printError(`Hack failed: Your software power is insufficient (need level ${t.security}).`);\n      print(`Try installing more or stronger software.`);\n      return;\n    }\n\n    // Chance of success depends on rank and software\n    // Base chance: 30%, add 5% per rank, 3% per total software power above security level\n\n    const softwarePower = Object.keys(installedSoftware).reduce((acc, s) => {\n      const mp = {\n        'scanner': 1,\n        'exploit-kits': 3,\n        'proxy': 2,\n        'botnet': 4,\n        'encryption': 2,\n        'decrypter': 1,\n        'firewall-bypass': 5\n      };\n      return acc + (mp[s] || 0);\n    }, 0);\n\n    let chance = 0.3 + (0.05 * rank) + (0.03 * (softwarePower - t.security));\n    if (chance > 0.95) chance = 0.95;\n\n    // Random success\n    if (Math.random() < chance) {\n      print(`Successfully hacked '${target}'!`);\n      hackedTargets[target] = true;\n\n      money += t.money;\n      experience += t.exp;\n      print(`You stole $${t.money.toLocaleString()} and gained ${t.exp.toLocaleString()} EXP.`);\n\n      // Rank up for every 10k exp\n      const newRank = Math.floor(experience / 10000) + 1;\n      if (newRank > rank) {\n        rank = newRank;\n        print(`*** Congratulations! You ranked up to Level ${rank}! ***`);\n      }\n      updatePrompt();\n    } else {\n      printError('Hack failed! The system detected your attempt and is tracing you...');\n      // Penalty: lose some money or software?\n\n      const penalty = Math.min(2000, money);\n      money -= penalty;\n      print(`You lost $${penalty.toLocaleString()} while covering your tracks.`);\n      updatePrompt();\n    }\n  }\n\n  // Install software\n  function installSoftware(soft) {\n    if (!softwareLibrary[soft]) {\n      printError(`Software '${soft}' not found in shop.`);\n      return;\n    }\n    if (installedSoftware[soft]) {\n      print(`You already have '${soft}' installed.`);\n      return;\n    }\n    const cost = softwareLibrary[soft].cost;\n    if (money < cost) {\n      printError(`Not enough money to install '${soft}'. You need $${cost.toLocaleString()}.`);\n      return;\n    }\n    money -= cost;\n    installedSoftware[soft] = true;\n    print(`Installed '${soft}'. (-$${cost.toLocaleString()})`);\n    updatePrompt();\n  }\n  // Uninstall software\n  function uninstallSoftware(soft) {\n    if (!installedSoftware[soft]) {\n      printError(`You do not have '${soft}' installed.`);\n      return;\n    }\n    delete installedSoftware[soft];\n    print(`Uninstalled '${soft}'.`);\n    updatePrompt();\n  }\n\n  // Show status\n  function showStatus() {\n    print(\"=== STATUS ===\");\n    print(`Money: $${money.toLocaleString()}`);\n    print(`Level: ${rank}`);\n    print(`Experience: ${experience.toLocaleString()}`);\n    print(\"Installed Software:\");\n    if (Object.keys(installedSoftware).length === 0) {\n      print(\"  (none)\");\n    } else {\n      for (const s in installedSoftware) {\n        print(`  - ${s} : ${softwareLibrary[s].desc}`);\n      }\n    }\n  }\n\n  // Show shop software list\n  function showShop() {\n    print(\"=== SOFTWARE SHOP ===\");\n    for (const s in softwareLibrary) {\n      print(`  ${s.padEnd(15)} $${softwareLibrary[s].cost.toLocaleString()}  - ${softwareLibrary[s].desc}`);\n    }\n    print(\"Use 'install <software>' to buy and install.\");\n  }\n\n  // Show targets list\n  function showTargets() {\n    print(\"=== HACK TARGETS ===\");\n    for (const t in targets) {\n      print(`  ${t.padEnd(12)} Security:${targets[t].security}  - ${targets[t].desc}`);\n    }\n    print(\"Use 'hack <target>' to attempt a hack.\");\n  }\n\n  // Clear screen\n  function clearScreen() {\n    screen.textContent = '';\n  }\n\n  // Update prompt (just example for future features)\n  function updatePrompt() {\n    // For now, no prompt change, but can show status summary in footer or elsewhere\n  }\n\n  // Process user commands\n  function processCommand(input) {\n    if (!input.trim()) return;\n\n    print(`> ${input}`);\n\n    const args = input.trim().toLowerCase().split(/\\s+/);\n    const cmd = args[0];\n\n    switch (cmd) {\n      case 'help':\n        print(helpMessage);\n        break;\n      case 'status':\n        showStatus();\n        break;\n      case 'shop':\n        showShop();\n        break;\n      case 'install':\n        if (args.length < 2) {\n          printError(\"You must specify software to install. Usage: install <software>\");\n          break;\n        }\n        installSoftware(args[1]);\n        break;\n      case 'uninstall':\n        if (args.length < 2) {\n          printError(\"You must specify software to uninstall. Usage: uninstall <software>\");\n          break;\n        }\n        uninstallSoftware(args[1]);\n        break;\n      case 'hack':\n        if (args.length < 2) {\n          printError(\"You must specify target to hack. Usage: hack <target>\");\n          break;\n        }\n        attemptHack(args[1]);\n        break;\n      case 'targets':\n        showTargets();\n        break;\n      case 'clear':\n        clearScreen();\n        break;\n      case 'exit':\n        resetGame();\n        break;\n      default:\n        printError(`Unknown command: '${cmd}'. Type 'help' for commands.`);\n    }\n  }\n\n  // Handle form submission\n  form.addEventListener('submit', e => {\n    e.preventDefault();\n    const val = commandInput.value;\n    processCommand(val);\n    commandInput.value = '';\n  });\n\n  // Initialize game\n  resetGame();\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}