{
  "messages": [
    {
      "role": "user",
      "content": "a webpage that automatically spawns 3 (three) bots via websocket with randomly generates nicks and connects to irc.h4ks.com on port 8097 and each one of them says \"Joined and ready\" after joining #bots after connecting and has a control panel to join, part and message channels\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "Creating a simple web application that spawns three bots via WebSocket and connects them to an IRC server is a fun project! Below is a complete HTML file that includes embedded CSS and JavaScript. This code will create a basic interface for the bots to connect to the IRC server and send messages.\n\nPlease note that this example assumes you have a WebSocket server set up to handle the IRC connections, as browsers cannot directly connect to IRC servers over TCP. The WebSocket server would need to handle the communication between the web app and the IRC server.\n\nHere's the complete HTML code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>IRC Bot Control Panel</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            padding: 20px;\n            background-color: #f4f4f4;\n        }\n        h1 {\n            text-align: center;\n        }\n        #botStatus {\n            margin: 20px 0;\n            padding: 10px;\n            background-color: #fff;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        #controls {\n            margin-top: 20px;\n        }\n        input[type=\"text\"] {\n            width: 200px;\n            padding: 5px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 5px 10px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>IRC Bot Control Panel</h1>\n<div id=\"botStatus\"></div>\n<div id=\"controls\">\n    <input type=\"text\" id=\"channel\" placeholder=\"#channel\">\n    <button id=\"joinBtn\">Join Channel</button>\n    <button id=\"partBtn\">Part Channel</button>\n    <button id=\"messageBtn\">Send Message</button>\n    <input type=\"text\" id=\"message\" placeholder=\"Message\">\n</div>\n\n<script>\n    const botCount = 3;\n    const bots = [];\n    const botStatusDiv = document.getElementById('botStatus');\n    const channelInput = document.getElementById('channel');\n    const messageInput = document.getElementById('message');\n\n    function generateRandomNick() {\n        return 'Bot' + Math.floor(Math.random() * 1000);\n    }\n\n    function createBot() {\n        const nick = generateRandomNick();\n        const ws = new WebSocket('ws://localhost:8080'); // Change to your WebSocket server\n\n        ws.onopen = () => {\n            ws.send(`NICK ${nick}`);\n            ws.send(`USER ${nick} 0 * :${nick}`);\n            ws.send(`JOIN #bots`);\n            ws.send(`PRIVMSG #bots :Joined and ready`);\n            updateBotStatus(`${nick} connected and joined #bots`);\n        };\n\n        ws.onmessage = (event) => {\n            updateBotStatus(`Message from ${nick}: ${event.data}`);\n        };\n\n        ws.onclose = () => {\n            updateBotStatus(`${nick} disconnected`);\n        };\n\n        return ws;\n    }\n\n    function updateBotStatus(message) {\n        botStatusDiv.innerHTML += `<div>${message}</div>`;\n    }\n\n    for (let i = 0; i < botCount; i++) {\n        bots.push(createBot());\n    }\n\n    document.getElementById('joinBtn').onclick = () => {\n        const channel = channelInput.value;\n        bots.forEach(ws => {\n            ws.send(`JOIN ${channel}`);\n            ws.send(`PRIVMSG ${channel} :Joined ${channel}`);\n        });\n    };\n\n    document.getElementById('partBtn').onclick = () => {\n        const channel = channelInput.value;\n        bots.forEach(ws => {\n            ws.send(`PART ${channel}`);\n            ws.send(`PRIVMSG ${channel} :Parted ${channel}`);\n        });\n    };\n\n    document.getElementById('messageBtn').onclick = () => {\n        const message = messageInput.value;\n        const channel = channelInput.value;\n        bots.forEach(ws => {\n            ws.send(`PRIVMSG ${channel} :${message}`);\n        });\n    };\n</script>\n\n</body>\n</html>\n```\n\n### Explanation:\n1. **WebSocket Connection**: The code connects to a WebSocket server (you need to replace `ws://localhost:8080` with your actual WebSocket server URL).\n2. **Bot Creation**: Three bots are created with random nicknames.\n3. **Bot Actions**: Each bot joins the `#bots` channel and sends a message saying \"Joined and ready\".\n4. **Control Panel**: The control panel allows you to join or part from channels and send messages to them.\n\n### Important Note:\n- This code is a basic example and does not include error handling or security features. Make sure to implement proper error handling and security measures in a production environment.\n- You will need a WebSocket server that can communicate with the IRC server for this to work. The WebSocket server should handle the IRC protocol and relay messages between the bots and the IRC server."
    }
  ]
}