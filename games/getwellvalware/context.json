{
  "messages": [
    {
      "role": "user",
      "content": "write a get well card with the text \"Get well soon, Valware <3\" with 3D particle explosions and fireball effects\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Get Well Soon Card</title>\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');\n  html, body {\n    margin: 0; padding: 0; height: 100%;\n    background: #111;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: 'Poppins', sans-serif;\n    perspective: 800px;\n    user-select: none;\n  }\n  #container {\n    position: relative;\n    width: 400px;\n    height: 200px;\n    background: linear-gradient(135deg, #ff416c, #ff4b2b);\n    border-radius: 20px;\n    box-shadow:\n      0 0 15px 5px rgba(255,75,43,.65),\n      inset 0 0 60px 12px rgba(255,75,43,.6);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    font-size: 2.4rem;\n    font-weight: 700;\n    text-align: center;\n    line-height: 1.2;\n    text-shadow:\n      0 0 6px #fff7,\n      0 0 14px #ff6347cc,\n      0 0 22px #ff6347cc,\n      0 0 30px #ff6347cc;\n    transform-style: preserve-3d;\n    cursor: pointer;\n    user-select: none;\n    box-sizing: border-box;\n  }\n\n  #message {\n    position: relative;\n    z-index: 10;\n  }\n\n  canvas {\n    position: absolute;\n    top: 0; left: 0;\n    width: 100%; height: 100%;\n    pointer-events: none;\n  }\n</style>\n</head>\n<body>\n  <div id=\"container\" tabindex=\"0\" aria-label=\"Get well soon card with particle effects\">\n    <div id=\"message\">Get well soon, Valware &lt;3</div>\n    <canvas id=\"canvas\"></canvas>\n  </div>\n\n<script>\n(() => {\n  const container = document.getElementById('container');\n  const canvas = document.getElementById('canvas');\n  const ctx = canvas.getContext('2d');\n\n  let W, H;\n  function resize() {\n    W = container.clientWidth;\n    H = container.clientHeight;\n    canvas.width = W * devicePixelRatio;\n    canvas.height = H * devicePixelRatio;\n    canvas.style.width = W + 'px';\n    canvas.style.height = H + 'px';\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n  }\n  resize();\n  window.addEventListener('resize', resize);\n\n  // Utility: random float in [min,max)\n  function rf(min, max) { return Math.random() * (max - min) + min }\n\n  // Particle classes\n\n  class Particle {\n    constructor(x, y, vx, vy, life, size, color, type='particle') {\n      this.x = x;\n      this.y = y;\n      this.vx = vx;\n      this.vy = vy;\n      this.life = life;\n      this.size = size;\n      this.color = color;\n      this.age = 0;\n      this.type = type;\n\n      // extra for 3D-ish:\n      this.z = 0;\n      this.vz = rf(-0.5,0.5);\n      this.angle = rf(0,Math.PI*2);\n      this.va = rf(-0.1,0.1);\n    }\n    update(dt) {\n      this.x += this.vx * dt;\n      this.y += this.vy * dt;\n      this.z += this.vz * dt;\n      this.angle += this.va * dt;\n      this.vy += 50 * dt; // gravity\n      this.age += dt;\n\n      // fade out\n      this.alpha = 1 - this.age / this.life;\n      if(this.alpha < 0) this.alpha = 0;\n    }\n    draw(ctx) {\n      const a = this.alpha;\n      if(this.type === 'particle') {\n        ctx.save();\n        ctx.translate(this.x, this.y - this.z * 3);\n        ctx.rotate(this.angle);\n        const radius = this.size * (0.5 + a/2);\n        const gradient = ctx.createRadialGradient(0,0,radius*0.1, 0,0,radius);\n        gradient.addColorStop(0, `rgba(${this.color.r},${this.color.g},${this.color.b},${a})`);\n        gradient.addColorStop(1, `rgba(${this.color.r},${this.color.g},${this.color.b},0)`);\n        ctx.fillStyle = gradient;\n        ctx.beginPath();\n        ctx.arc(0, 0, radius, 0, Math.PI*2);\n        ctx.fill();\n        ctx.restore();\n      }\n      else if(this.type === 'fireball') {\n        // fireball: a glowing circle with flickering texture\n        ctx.save();\n        ctx.translate(this.x, this.y - this.z * 3);\n        ctx.rotate(this.angle);\n        const radius = this.size * (0.8 + 0.4*Math.sin(this.age*30));\n        // Outer glow\n        const glow = ctx.createRadialGradient(0,0,radius*0.3,0,0,radius);\n        glow.addColorStop(0, `rgba(255,140,0,${a})`);\n        glow.addColorStop(0.7, `rgba(255,69,0,${a*0.3})`);\n        glow.addColorStop(1, 'rgba(255,69,0,0)');\n        ctx.fillStyle = glow;\n        ctx.beginPath();\n        ctx.arc(0, 0, radius, 0, Math.PI*2);\n        ctx.fill();\n        // Inner flame\n        const innerFlame = ctx.createRadialGradient(0,0,radius*0.15,0,0,radius*0.6);\n        innerFlame.addColorStop(0, `rgba(255,255,160,${a})`);\n        innerFlame.addColorStop(1, `rgba(255,69,0,0)`);\n        ctx.fillStyle = innerFlame;\n        ctx.beginPath();\n        ctx.arc(0, 0, radius*0.6, 0, Math.PI*2);\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n    isDead() {\n      return this.age >= this.life;\n    }\n  }\n\n  let particles = [];\n\n  // 3D explosion effect:\n  // When clicking or tapping, spawn two simultaneous explosions: particles and fireballs\n\n  function createExplosion(x, y) {\n    const totalParticles = 40;\n    const totalFireballs = 8;\n\n    // Particle color: soft pink/orange for warm effect\n    for(let i=0; i < totalParticles; i++) {\n      const angle = (Math.PI * 2) * (i / totalParticles) + rf(-0.15,0.15);\n      const speed = rf(80, 250);\n      const vx = Math.cos(angle) * speed;\n      const vy = Math.sin(angle) * speed * 0.8 + rf(-20,20);\n      const size = rf(3,6);\n      const life = rf(0.9,1.3);\n      const color = {r: rf(240,255), g: rf(150,100), b: rf(75,40)};\n      particles.push(new Particle(x,y,vx,vy,life,size,color,'particle'));\n    }\n\n    // Fireball explosions: bigger, fewer, glowing orange/yellow orbs\n    for(let i=0; i < totalFireballs; i++) {\n      const angle = (Math.PI * 2) * (i / totalFireballs) + rf(-0.3,0.3);\n      const speed = rf(50, 110);\n      const vx = Math.cos(angle) * speed * 0.7;\n      const vy = Math.sin(angle) * speed * 0.6 - rf(30,50);\n      const size = rf(15,25);\n      const life = rf(1.1,1.5);\n      const color = {r:255, g:140, b:0};\n      particles.push(new Particle(x,y,vx,vy,life,size,color,'fireball'));\n    }\n  }\n\n  // Automatically trigger 3 initial explosions for show\n  function burstCenter() {\n    createExplosion(W/2, H/2);\n  }\n  burstCenter();\n\n  // Also create random slow bursts every 3s\n  let burstInterval = setInterval(() => {\n    const x = rf(W*0.25, W*0.75);\n    const y = rf(H*0.3, H*0.7);\n    createExplosion(x,y);\n  }, 3000);\n\n  // Also on click/tap\n  container.addEventListener('click', e => {\n    const rect = container.getBoundingClientRect();\n    const mx = e.clientX - rect.left;\n    const my = e.clientY - rect.top;\n    createExplosion(mx, my);\n  });\n\n  let last = 0;\n  function animate(t=0) {\n    if(!last) last = t;\n    const dt = (t - last)/1000;\n    last = t;\n\n    ctx.clearRect(0, 0, W, H);\n\n    // Update and draw particles\n    particles = particles.filter(p => {\n      p.update(dt);\n      if(!p.isDead()){\n        p.draw(ctx);\n        return true;\n      }\n      return false;\n    });\n\n    requestAnimationFrame(animate);\n  }\n  animate();\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}