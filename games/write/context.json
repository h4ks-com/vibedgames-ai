{
  "messages": [
    {
      "role": "user",
      "content": "a small roguelike game with randomly generated items\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Mini Roguelike</title>\n<style>\n  /* Reset */\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #111;\n    color: #eee;\n    font-family: 'Courier New', Courier, monospace;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n  }\n\n  #game {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    user-select: none;\n  }\n\n  #map {\n    background-color: #222;\n    border: 2px solid #555;\n    image-rendering: pixelated;\n  }\n\n  #sidebar {\n    background: #222;\n    width: 260px;\n    padding: 10px;\n    border-left: 2px solid #555;\n    font-size: 14px;\n    line-height: 1.4;\n    display: flex;\n    flex-direction: column;\n  }\n\n  #container {\n    flex: 1;\n    display: flex;\n    max-width: 920px;\n    margin: 8px auto;\n    border: 2px solid #555;\n    height: 400px;\n    background: #222;\n  }\n\n  h1 {\n    margin: 5px 0 10px 0;\n    font-weight: normal;\n    font-size: 22px;\n    text-align: center;\n    color: #ddd;\n    text-shadow: 0 0 5px #0af;\n  }\n\n  #log {\n    flex: 1;\n    background: #111;\n    margin-top: 7px;\n    padding: 6px;\n    border-radius: 3px;\n    overflow-y: auto;\n    font-size: 13px;\n    line-height: 1.3;\n  }\n\n  #stats {\n    margin-bottom: 10px;\n  }\n\n  #inventory {\n    background: #111;\n    border-radius: 3px;\n    max-height: 120px;\n    overflow-y: auto;\n    padding: 6px;\n  }\n\n  #instructions {\n    font-size: 12px;\n    color: #999;\n    margin-top: 10px;\n    user-select:none;\n  }\n\n  .item {\n    cursor: pointer;\n    user-select:none;\n  }\n  .item:hover {\n    background: #0af4;\n  }\n\n  /* Scrollbar for log and inventory */\n  #log::-webkit-scrollbar,\n  #inventory::-webkit-scrollbar {\n    width: 6px;\n  }\n  #log::-webkit-scrollbar-thumb,\n  #inventory::-webkit-scrollbar-thumb {\n    background: #0af8;\n    border-radius: 3px;\n  }\n</style>\n</head>\n<body>\n  <h1>Mini Roguelike</h1>\n  <div id=\"container\">\n    <div id=\"game\">\n      <canvas id=\"map\" width=\"400\" height=\"400\" tabindex=\"0\"></canvas>\n    </div>\n    <div id=\"sidebar\">\n      <div id=\"stats\"></div>\n      <div><strong>Inventory</strong></div>\n      <div id=\"inventory\" tabindex=\"0\" aria-label=\"Player Inventory\">\n      </div>\n      <div id=\"instructions\">\n        Move: Arrow keys or WASD<br />\n        Pick up item: E<br />\n        Use item: Click item in inventory<br />\n        Restart: R\n      </div>\n    </div>\n  </div>\n  <div id=\"log\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n\n<script>\n(() => {\n  const canvas = document.getElementById('map');\n  const ctx = canvas.getContext('2d');\n  const statsDiv = document.getElementById('stats');\n  const logDiv = document.getElementById('log');\n  const invDiv = document.getElementById('inventory');\n\n  // Map parameters\n  const MAP_WIDTH = 20;\n  const MAP_HEIGHT = 20;\n  const TILE_SIZE = 20;\n\n  canvas.width = MAP_WIDTH * TILE_SIZE;\n  canvas.height = MAP_HEIGHT * TILE_SIZE;\n\n  // Tiles:\n  // '#' wall\n  // '.' floor\n  // 'D' door (maybe)\n  // '@' player\n  // items are on floor spaces\n\n  // Game state\n  let map = [];\n  let player = { x: 1, y: 1, hp: 20, maxHp: 20, atk: 3, def: 1 };\n  let messages = [];\n  let inventory = [];\n  let itemsOnMap = [];\n  let monsters = [];\n  let turnLocked = false;\n\n  // Item defs\n  const itemTypes = [\n    {\n      id: 'potion',\n      name: 'Health Potion',\n      description: 'Heals 8 HP',\n      type: 'consumable',\n      effect: (plyr) => {\n        const heal = 8;\n        plyr.hp = Math.min(plyr.maxHp, plyr.hp + heal);\n        addMessage(`You drank a Health Potion and healed ${heal} HP.`);\n      },\n      color: '#e00',\n      char: '!',\n    },\n    {\n      id: 'sword',\n      name: 'Sword',\n      description: 'Increases attack by 2 when equipped.',\n      type: 'equipment',\n      slot: 'weapon',\n      atkBonus: 2,\n      color: '#aaa',\n      char: '/',\n    },\n    {\n      id: 'shield',\n      name: 'Shield',\n      description: 'Increases defense by 2 when equipped.',\n      type: 'equipment',\n      slot: 'offhand',\n      defBonus: 2,\n      color: '#0af',\n      char: ']',\n    },\n    {\n      id: 'scroll',\n      name: 'Scroll of Fireball',\n      description: 'Deals 10 damage to all monsters.',\n      type: 'consumable',\n      effect: (plyr) => {\n        let hitAny = false;\n        monsters.forEach(mon => {\n          if (isAdjacent(plyr, mon)) {\n            mon.hp -= 10;\n            addMessage(`Fireball burns ${mon.name} for 10 damage!`);\n            hitAny = true;\n          }\n        });\n        if (!hitAny) {\n          addMessage('Fireball fizzles. No monsters nearby.');\n        }\n        cleanupMonsters();\n      },\n      color: '#f90',\n      char: '?',\n    },\n  ];\n\n  // Player equipment\n  let equipped = {\n    weapon: null,\n    offhand: null,\n  };\n\n  // Monster defs\n  const monsterTypes = [\n    { id: 'goblin', name: 'Goblin', hp: 10, atk: 2, def: 0, char: 'g', color: '#0f0' },\n    { id: 'orc', name: 'Orc', hp: 16, atk: 4, def:1, char: 'o', color: '#fa0' },\n  ];\n\n  // Utils\n  function addMessage(text) {\n    messages.push(text);\n    if (messages.length > 10) messages.shift();\n    renderLog();\n  }\n\n  function renderLog() {\n    logDiv.innerHTML = messages.map(m => `<div>${m}</div>`).join('');\n    logDiv.scrollTop = logDiv.scrollHeight;\n  }\n\n  function rndInt(min,max) {\n    return Math.floor(Math.random()*(max-min+1)) + min;\n  }\n\n  function shuffleArray(arr) {\n    for(let i = arr.length -1; i>0; i--){\n      const j = Math.floor(Math.random()*(i+1));\n      [arr[i],arr[j]]=[arr[j],arr[i]];\n    }\n  }\n\n  function isFloor(x,y){\n    if(x < 0 || y < 0 || x >= MAP_WIDTH || y >= MAP_HEIGHT) return false;\n    return map[y][x] === '.';\n  }\n\n  function isBlocked(x,y) {\n    if (x < 0 || y < 0 || x >= MAP_WIDTH || y >= MAP_HEIGHT) return true;\n    if (map[y][x] === '#') return true;\n    if (monsters.find(m => m.x === x && m.y === y)) return true;\n    return false;\n  }\n\n  function isAdjacent(a,b) {\n    return Math.abs(a.x-b.x) <= 1 && Math.abs(a.y-b.y) <= 1;\n  }\n\n  // Map generation: simple room with random inner walls\n  function generateMap() {\n    // Initialize all walls\n    map = new Array(MAP_HEIGHT);\n    for(let y=0;y<MAP_HEIGHT;y++){\n      map[y] = new Array(MAP_WIDTH).fill('#');\n    }\n\n    // Create one big room inside border\n    for(let y=1;y<MAP_HEIGHT-1;y++) {\n      for(let x=1;x<MAP_WIDTH-1;x++) {\n        map[y][x] = '.';\n      }\n    }\n\n    // Place some random walls inside room\n    let wallCount = 40;\n    while (wallCount > 0) {\n      const rx = rndInt(1, MAP_WIDTH-2);\n      const ry = rndInt(1, MAP_HEIGHT-2);\n      // Don't block player start\n      if (rx === player.x && ry === player.y) continue;\n      map[ry][rx] = '#';\n      wallCount--;\n    }\n  }\n\n  function placeItems() {\n    itemsOnMap = [];\n    let itemCount = 15;\n    while(itemCount > 0) {\n      const x = rndInt(1, MAP_WIDTH-2);\n      const y = rndInt(1, MAP_HEIGHT-2);\n      if(!isFloor(x,y)) continue;\n      if(itemsOnMap.find(i => i.x === x && i.y === y)) continue;\n      const itemType = itemTypes[rndInt(0,itemTypes.length-1)];\n      itemsOnMap.push({ ...itemType, x, y });\n      itemCount--;\n    }\n  }\n\n  function placeMonsters() {\n    monsters = [];\n    let monCount = 8;\n    while(monCount > 0) {\n      const x = rndInt(1, MAP_WIDTH-2);\n      const y = rndInt(1, MAP_HEIGHT-2);\n      if(!isFloor(x,y)) continue;\n      if(monsters.find(m => m.x === x && m.y === y)) continue;\n      if(x === player.x && y === player.y) continue;\n      const mtype = monsterTypes[rndInt(0, monsterTypes.length-1)];\n      monsters.push({\n        ...mtype,\n        x, y,\n        hp: mtype.hp,\n      });\n      monCount--;\n    }\n  }\n\n  function render() {\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n\n    // draw map\n    for(let y=0;y<MAP_HEIGHT;y++) {\n      for(let x=0;x<MAP_WIDTH;x++){\n        const tile = map[y][x];\n        if(tile === '#') {\n          ctx.fillStyle = '#555';\n          ctx.fillRect(x*TILE_SIZE, y*TILE_SIZE, TILE_SIZE, TILE_SIZE);\n        } else {\n          ctx.fillStyle = '#222';\n          ctx.fillRect(x*TILE_SIZE, y*TILE_SIZE, TILE_SIZE, TILE_SIZE);\n        }\n      }\n    }\n\n    // draw items\n    itemsOnMap.forEach(item => {\n      ctx.fillStyle = item.color;\n      ctx.font = `${TILE_SIZE-4}px monospace`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(item.char, item.x*TILE_SIZE + TILE_SIZE/2, item.y*TILE_SIZE + TILE_SIZE/2);\n    });\n\n    // draw monsters\n    monsters.forEach(mon => {\n      ctx.fillStyle = mon.color;\n      ctx.font = `${TILE_SIZE-2}px monospace`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(mon.char, mon.x*TILE_SIZE + TILE_SIZE/2, mon.y*TILE_SIZE + TILE_SIZE/2);\n    });\n\n    // draw player\n    ctx.fillStyle = '#0af';\n    ctx.font = `${TILE_SIZE-2}px monospace`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('@', player.x*TILE_SIZE + TILE_SIZE/2, player.y*TILE_SIZE + TILE_SIZE/2);\n\n    renderStats();\n    renderInventory();\n  }\n\n  function renderStats() {\n    const atkBonus = equipped.weapon ? equipped.weapon.atkBonus || 0 : 0;\n    const defBonus = equipped.offhand ? equipped.offhand.defBonus || 0 : 0;\n    const totalAtk = player.atk + atkBonus;\n    const totalDef = player.def + defBonus;\n\n    statsDiv.innerHTML = `\n      <div><strong>HP:</strong> ${player.hp} / ${player.maxHp}</div>\n      <div><strong>Attack:</strong> ${totalAtk} ${equipped.weapon ? `(+${equipped.weapon.atkBonus})` : ''}</div>\n      <div><strong>Defense:</strong> ${totalDef} ${equipped.offhand ? `(+${equipped.offhand.defBonus})` : ''}</div>\n    `;\n  }\n\n  function renderInventory() {\n    invDiv.innerHTML = '';\n    if (inventory.length === 0) {\n      invDiv.textContent = 'Empty';\n      return;\n    }\n    inventory.forEach((item, i) => {\n      const div = document.createElement('div');\n      div.className = 'item';\n      div.tabIndex = 0;\n      div.title = item.description;\n      let label = '';\n      if (item.type === 'equipment') {\n        const eqSlot = equipped[item.slot] === item ? ' (Equipped)' : '';\n        label = `${item.name}${eqSlot}`;\n      } else {\n        label = item.name;\n      }\n      div.textContent = label;\n      div.style.color = item.color;\n      div.dataset.invIndex = i;\n      invDiv.appendChild(div);\n    });\n  }\n\n  function movePlayer(dx, dy) {\n    if(turnLocked) return;    \n    const nx = player.x + dx;\n    const ny = player.y + dy;\n    if(nx < 0 || ny < 0 || nx >= MAP_WIDTH || ny >= MAP_HEIGHT) return;\n    if(map[ny][nx] === '#') return;\n\n    const targetMon = monsters.find(m => m.x === nx && m.y === ny);\n    if(targetMon) {\n      attackMonster(targetMon);\n      endTurn();\n      return;\n    }\n\n    player.x = nx;\n    player.y = ny;\n\n    // Check if stepped on item\n    const itemHere = itemsOnMap.find(i => i.x === player.x && i.y === player.y);\n    if (itemHere) {\n      addMessage(`You see a ${itemHere.name} here.`);\n    }\n\n    endTurn();\n  }\n\n  function attackMonster(mon) {\n    // Calculate player's total attack\n    const atkBonus = equipped.weapon ? equipped.weapon.atkBonus || 0 : 0;\n    const defBonusMon = mon.def || 0;\n    const totalAtk = player.atk + atkBonus;\n    // Damage = attack - defense (min 1)\n    let dmg = totalAtk - defBonusMon;\n    if(dmg < 1) dmg = 1;\n    mon.hp -= dmg;\n    addMessage(`You hit the ${mon.name} for ${dmg} damage.`);\n\n    if (mon.hp <= 0) {\n      addMessage(`The ${mon.name} dies!`);\n      monsters = monsters.filter(m => m !== mon);\n    }\n  }\n\n  function monstersAct() {\n    monsters.forEach(mon => {\n      if (mon.hp <= 0) return;\n\n      // Simple AI: move towards player if close, else random move\n      const distX = player.x - mon.x;\n      const distY = player.y - mon.y;\n      let moveX = 0, moveY = 0;\n\n      if(Math.abs(distX) <= 5 && Math.abs(distY) <= 5) {\n        // move closer\n        moveX = distX === 0 ? 0 : distX / Math.abs(distX);\n        moveY = distY === 0 ? 0 : distY / Math.abs(distY);\n      } else {\n        // random move\n        const moves = [\n          [1,0],[-1,0],[0,1],[0,-1],\n          [1,1],[1,-1],[-1,1],[-1,-1],\n          [0,0],\n        ];\n        const choice = moves[rndInt(0,moves.length-1)];\n        moveX = choice[0];\n        moveY = choice[1];\n      }\n\n      const nx = mon.x + moveX;\n      const ny = mon.y + moveY;\n\n      // Check if player is adjacent and in the direction monster wants to move\n      if(nx === player.x && ny === player.y) {\n        monsterAttack(mon);\n        return;\n      }\n\n      // Move if floor and no monster there and no player\n      if (isFloor(nx, ny) && !monsters.find(m => m.x === nx && m.y === ny) && !(player.x === nx && player.y === ny)) {\n        mon.x = nx;\n        mon.y = ny;\n      }\n    });\n  }\n\n  function monsterAttack(mon) {\n    const atk = mon.atk || 1;\n    const defBonus = equipped.offhand ? equipped.offhand.defBonus || 0 : 0;\n    const totalDef = player.def + defBonus;\n    let dmg = atk - totalDef;\n    if(dmg < 1) dmg = 1;\n    player.hp -= dmg;\n    addMessage(`The ${mon.name} hits you for ${dmg} damage!`);\n\n    if(player.hp <=0) {\n      addMessage('You died! Press R to restart.');\n      turnLocked = true;\n    }\n  }\n\n  function endTurn() {\n    turnLocked = true;\n    monstersAct();\n    cleanupMonsters();\n    render();\n    if(player.hp > 0) turnLocked = false;\n  }\n\n  function cleanupMonsters(){\n    monsters = monsters.filter(m => m.hp > 0);\n  }\n\n  function pickUpItem() {\n    if(turnLocked) return;\n    const index = itemsOnMap.findIndex(i => i.x === player.x && i.y === player.y);\n    if (index === -1) {\n      addMessage('There is nothing here to pick up.');\n      return;\n    }\n    const item = itemsOnMap[index];\n    itemsOnMap.splice(index,1);\n    inventory.push(item);\n    addMessage(`You picked up a ${item.name}.`);\n    render();\n  }\n\n  function useItem(index) {\n    if (index < 0 || index >= inventory.length) return;\n    const item = inventory[index];\n\n    if(item.type === 'consumable') {\n      item.effect(player);\n      inventory.splice(index,1);\n    } else if(item.type === 'equipment') {\n      // Toggle equip/unequip\n      if (equipped[item.slot] === item) {\n        // Unequip\n        equipped[item.slot] = null;\n        addMessage(`You unequipped ${item.name}.`);\n      } else {\n        // Equip new\n        equipped[item.slot] = item;\n        addMessage(`You equipped ${item.name}.`);\n      }\n    }\n    render();\n  }\n\n  // Keyboard input\n  function onKeyDown(e) {\n    if(turnLocked) {\n      if(e.key.toLowerCase() === 'r') {\n        init();\n      }\n      return;\n    }\n    switch(e.key) {\n      case 'ArrowUp':\n      case 'w':\n      case 'W':\n        movePlayer(0,-1);\n        break;\n      case 'ArrowDown':\n      case 's':\n      case 'S':\n        movePlayer(0,1);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n      case 'A':\n        movePlayer(-1,0);\n        break;\n      case 'ArrowRight':\n      case 'd':\n      case 'D':\n        movePlayer(1,0);\n        break;\n      case 'e':\n      case 'E':\n        pickUpItem();\n        break;\n      case 'r':\n      case 'R':\n        init();\n        break;\n    }\n  }\n\n  // Clicking on inventory items to use\n  invDiv.addEventListener('click', (e) => {\n    const idx = e.target.dataset.invIndex;\n    if(idx !== undefined) {\n      useItem(+idx);\n      endTurn();\n    }\n  });\n  invDiv.addEventListener('keydown', e => {\n    // Keyboard activation of inventory items (Enter or Space)\n    if(e.key === 'Enter' || e.key === ' ') {\n      const focused = document.activeElement;\n      if(focused && focused.dataset.invIndex !== undefined) {\n        e.preventDefault();\n        useItem(+focused.dataset.invIndex);\n        endTurn();\n      }\n    }\n  });\n\n  // Start / Reset game\n  function init() {\n    player = { x: 1, y: 1, hp: 20, maxHp: 20, atk: 3, def: 1 };\n    inventory = [];\n    equipped = {weapon:null, offhand:null};\n    generateMap();\n    placeItems();\n    placeMonsters();\n    messages = [];\n    turnLocked = false;\n    addMessage('Welcome to Mini Roguelike!');\n    render();\n  }\n\n  // Initial setup\n  init();\n\n  // Event listeners\n  window.addEventListener('keydown', onKeyDown);\n  canvas.setAttribute('tabindex','0');\n  canvas.focus();\n\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}