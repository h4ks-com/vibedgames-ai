{
  "messages": [
    {
      "role": "user",
      "content": "rule 110 with emojis\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n <!DOCTYPE html>\n <html lang=\"en\">\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Rule 110 Emoji Cellular Automaton ðŸ¤–</title>\n  <style>\n  body {\n  font-family: sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f0f0f0;\n  }\n\n  #grid-container {\n  display: flex;\n  flex-direction: column;\n  }\n\n  .row {\n  display: flex;\n  }\n\n  .cell {\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  line-height: 20px;\n  font-size: 16px;\n  }\n\n  .alive {\n  background-color: black;\n  color: yellow;\n  }\n\n  .dead {\n  background-color: white;\n  color: black;\n  }\n\n  button {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  }\n  </style>\n </head>\n <body>\n  <h1>Rule 110 Emoji Cellular Automaton ðŸ¤–</h1>\n  <div id=\"grid-container\"></div>\n  <button id=\"run-button\">Run ðŸš€</button>\n  <button id=\"reset-button\">Reset ðŸ”„</button>\n\n  <script>\n  const gridContainer = document.getElementById('grid-container');\n  const runButton = document.getElementById('run-button');\n  const resetButton = document.getElementById('reset-button');\n\n  const width = 60;\n  let grid = [];\n  let isRunning = false;\n  let intervalId;\n\n  const ALIVE = 'ðŸ˜€';\n  const DEAD = ' ';\n\n  function createGrid() {\n  grid = [];\n  for (let i = 0; i < width; i++) {\n  grid.push(DEAD);\n  }\n  grid[Math.floor(width / 2)] = ALIVE; // Initial condition\n  }\n\n  function renderGrid() {\n  gridContainer.innerHTML = '';\n  const rowElement = document.createElement('div');\n  rowElement.classList.add('row');\n  for (let i = 0; i < width; i++) {\n  const cellElement = document.createElement('div');\n  cellElement.classList.add('cell');\n  cellElement.textContent = grid[i];\n\n  if (grid[i] === ALIVE) {\n  cellElement.classList.add('alive');\n  } else {\n  cellElement.classList.add('dead');\n  }\n  rowElement.appendChild(cellElement);\n  }\n  gridContainer.appendChild(rowElement);\n  }\n\n  function applyRule110() {\n  const nextGrid = [];\n  for (let i = 0; i < width; i++) {\n  const left = grid[(i - 1 + width) % width] === ALIVE ? 1 : 0;\n  const center = grid[i] === ALIVE ? 1 : 0;\n  const right = grid[(i + 1) % width] === ALIVE ? 1 : 0;\n\n  const ruleNumber = parseInt(`${left}${center}${right}`, 2);\n\n  // Rule 110 in binary is 01101110, reversed it's 01110110 which is 110\n  if ([0, 2, 3, 4, 5, 6].includes(ruleNumber)) {\n  nextGrid.push(ALIVE);\n  } else {\n  nextGrid.push(DEAD);\n  }\n  }\n  grid = nextGrid;\n  }\n\n  function step() {\n  applyRule110();\n  renderGrid();\n  }\n\n  function runSimulation() {\n  isRunning = true;\n  runButton.textContent = 'Stop ðŸ›‘';\n  intervalId = setInterval(step, 100);\n  }\n\n  function stopSimulation() {\n  isRunning = false;\n  runButton.textContent = 'Run ðŸš€';\n  clearInterval(intervalId);\n  }\n\n  runButton.addEventListener('click', () => {\n  if (isRunning) {\n  stopSimulation();\n  } else {\n  runSimulation();\n  }\n  });\n\n  resetButton.addEventListener('click', () => {\n  stopSimulation();\n  createGrid();\n  renderGrid();\n  });\n\n  createGrid();\n  renderGrid();\n  </script>\n </body>\n </html>\n ```"
    },
    {
      "role": "user",
      "content": "make it 2d\nMake sure everything is kept in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n <!DOCTYPE html>\n <html lang=\"en\">\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>2D Rule 110 Emoji Cellular Automaton ðŸ¤–</title>\n  <style>\n  body {\n  font-family: sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #f0f0f0;\n  }\n\n  #grid-container {\n  display: flex;\n  flex-direction: column;\n  }\n\n  .row {\n  display: flex;\n  }\n\n  .cell {\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  line-height: 20px;\n  font-size: 16px;\n  }\n\n  .alive {\n  background-color: black;\n  color: yellow;\n  }\n\n  .dead {\n  background-color: white;\n  color: black;\n  }\n\n  button {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  }\n  </style>\n </head>\n <body>\n  <h1>2D Rule 110 Emoji Cellular Automaton ðŸ¤–</h1>\n  <div id=\"grid-container\"></div>\n  <button id=\"run-button\">Run ðŸš€</button>\n  <button id=\"reset-button\">Reset ðŸ”„</button>\n\n  <script>\n  const gridContainer = document.getElementById('grid-container');\n  const runButton = document.getElementById('run-button');\n  const resetButton = document.getElementById('reset-button');\n\n  const width = 60;\n  const height = 30;\n  let grid = [];\n  let isRunning = false;\n  let intervalId;\n\n  const ALIVE = 'ðŸ˜€';\n  const DEAD = ' ';\n\n  function createGrid() {\n  grid = [];\n  for (let y = 0; y < height; y++) {\n  grid[y] = [];\n  for (let x = 0; x < width; x++) {\n  grid[y][x] = DEAD;\n  }\n  }\n  // Initial condition - single alive cell in the middle of the top row\n  grid[0][Math.floor(width / 2)] = ALIVE;\n  }\n\n  function renderGrid() {\n  gridContainer.innerHTML = '';\n  for (let y = 0; y < height; y++) {\n  const rowElement = document.createElement('div');\n  rowElement.classList.add('row');\n  for (let x = 0; x < width; x++) {\n  const cellElement = document.createElement('div');\n  cellElement.classList.add('cell');\n  cellElement.textContent = grid[y][x];\n\n  if (grid[y][x] === ALIVE) {\n  cellElement.classList.add('alive');\n  } else {\n  cellElement.classList.add('dead');\n  }\n  rowElement.appendChild(cellElement);\n  }\n  gridContainer.appendChild(rowElement);\n  }\n  }\n\n  function applyRule110() {\n  const nextGrid = [];\n  for (let y = 0; y < height - 1; y++) {\n  nextGrid[y + 1] = [];\n  for (let x = 0; x < width; x++) {\n  const left = grid[y][(x - 1 + width) % width] === ALIVE ? 1 : 0;\n  const center = grid[y][x] === ALIVE ? 1 : 0;\n  const right = grid[y][(x + 1) % width] === ALIVE ? 1 : 0;\n\n  const ruleNumber = parseInt(`${left}${center}${right}`, 2);\n\n  if ([0, 2, 3, 4, 5, 6].includes(ruleNumber)) {\n  nextGrid[y + 1][x] = ALIVE;\n  } else {\n  nextGrid[y + 1][x] = DEAD;\n  }\n  }\n  }\n\n  // Copy the next generation to the grid\n  for (let y = 1; y < height; y++){\n  for (let x = 0; x < width; x++){\n  grid[y][x] = nextGrid[y][x];\n  }\n  }\n\n  }\n\n  function step() {\n  applyRule110();\n  renderGrid();\n  }\n\n  function runSimulation() {\n  isRunning = true;\n  runButton.textContent = 'Stop ðŸ›‘';\n  intervalId = setInterval(step, 100);\n  }\n\n  function stopSimulation() {\n  isRunning = false;\n  runButton.textContent = 'Run ðŸš€';\n  clearInterval(intervalId);\n  }\n\n  runButton.addEventListener('click', () => {\n  if (isRunning) {\n  stopSimulation();\n  } else {\n  runSimulation();\n  }\n  });\n\n  resetButton.addEventListener('click', () => {\n  stopSimulation();\n  createGrid();\n  renderGrid();\n  });\n\n  createGrid();\n  renderGrid();\n  </script>\n </body>\n </html>\n ```"
    }
  ]
}