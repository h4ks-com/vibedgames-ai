{
  "messages": [
    {
      "role": "user",
      "content": "Please use the following code as a base to update:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Python REPL</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/base16/dracula.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/lz-string@1.4.4/libs/lz-string.min.js\"></script>\n    <style>\n        body {\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            margin: 0;\n            padding: 0;\n            background-color: #282a36;\n            color: #f8f8f2;\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            flex: 1;\n            padding: 20px;\n            box-sizing: border-box;\n            max-width: 1200px;\n            margin: 0 auto;\n            width: 100%;\n        }\n        .editor-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 10px;\n        }\n        .output-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            background-color: #282a36;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            overflow: auto;\n        }\n        textarea {\n            flex: 1;\n            background-color: #282a36;\n            color: #f8f8f2;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            padding: 10px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n            resize: none;\n            outline: none;\n            margin-bottom: 10px;\n            white-space: pre;\n        }\n        textarea:focus {\n            border-color: #6272a4;\n        }\n        .hljs {\n            margin: 0;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #282a36;\n            overflow: auto;\n            flex: 1;\n        }\n        .button-container {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 10px;\n        }\n        button {\n            background-color: #50fa7b;\n            color: #282a36;\n            border: none;\n            border-radius: 5px;\n            padding: 8px 16px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        button:hover {\n            background-color: #5aff8d;\n        }\n        button:active {\n            transform: scale(0.98);\n        }\n        button.secondary {\n            background-color: #6272a4;\n            color: #f8f8f2;\n        }\n        button.secondary:hover {\n            background-color: #6a7cb0;\n        }\n        .output-title, .editor-title {\n            color: #bd93f9;\n            margin-bottom: 5px;\n            font-size: 14px;\n        }\n        .copied {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: #50fa7b;\n            color: #282a36;\n            padding: 10px 15px;\n            border-radius: 5px;\n            font-weight: bold;\n            opacity: 0;\n            transition: opacity 0.3s;\n            pointer-events: none;\n        }\n        .copied.show {\n            opacity: 1;\n        }\n        #output-content {\n            padding: 10px;\n            white-space: pre-wrap;\n            overflow: auto;\n            flex: 1;\n        }\n        a {\n            color: #8be9fd;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        .loading {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            color: #6272a4;\n            font-size: 24px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Python REPL <small><a href=\"#\" id=\"about-link\">?</a></small></h1>\n\n        <div class=\"editor-container\">\n            <div class=\"editor-title\">Editor</div>\n            <div id=\"editor-wrapper\" style=\"flex: 1; display: flex; flex-direction: column;\">\n                <textarea id=\"code-editor\" spellcheck=\"false\"></textarea>\n                <pre id=\"syntax-highlight\" class=\"hljs language-python\" style=\"display: none;\"></pre>\n            </div>\n        </div>\n\n        <div class=\"button-container\">\n            <button id=\"run-button\">Run</button>\n            <button id=\"share-button\" class=\"secondary\">Share</button>\n        </div>\n\n        <div class=\"output-container\">\n            <div class=\"output-title\">Output</div>\n            <div id=\"output-content\"></div>\n        </div>\n    </div>\n\n    <div id=\"copied-notification\" class=\"copied\">Copied!</div>\n\n    <div id=\"loading\" class=\"loading\">Loading Pyodide...</div>\n\n    <div id=\"about-modal\" style=\"display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(40, 42, 54, 0.9); z-index: 100; justify-content: center; align-items: center;\">\n        <div style=\"background-color: #282a36; padding: 20px; border-radius: 5px; max-width: 600px; max-height: 80vh; overflow: auto;\">\n            <h2 style=\"margin-top: 0; color: #ff79c6;\">About Python REPL</h2>\n            <p>This is a browser-based Python REPL powered by Pyodide, which runs Python in the browser using WebAssembly.</p>\n            <p><strong>Features:</strong></p>\n            <ul>\n                <li>Write and execute Python code directly in your browser</li>\n                <li>Share your code snippets via URL</li>\n                <li>Syntax highlighting for Python</li>\n                <li>Works offline after initial load</li>\n            </ul>\n            <p><strong>Limitations:</strong></p>\n            <ul>\n                <li>No filesystem access</li>\n                <li>Limited standard library (Pyodide's subset)</li>\n                <li>Slower than native Python</li>\n            </ul>\n            <p>Built with ❤️   using <a href=\"https://pyodide.org/\" target=\"_blank\">Pyodide</a></p>\n            <button id=\"close-about\" style=\"margin-top: 20px;\">Close</button>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js\"></script>\n    <script>\n        // Initialize Pyodide\n        let pyodide;\n        async function main() {\n            pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/\"\n            });\n            document.getElementById('loading').style.display = 'none';\n\n            // Load initial code from URL or use default\n            loadInitialCode();\n\n            // Set up event listeners\n            setupEditor();\n            setupButtons();\n        }\n\n        // Set up editor with syntax highlighting\n        function setupEditor() {\n            const editor = document.getElementById('code-editor');\n            const highlight = document.getElementById('syntax-highlight');\n\n            // Toggle between editable textarea and highlighted view\n            editor.addEventListener('focus', () => {\n                highlight.style.display = 'none';\n                editor.style.display = 'block';\n            });\n\n            editor.addEventListener('blur', () => {\n                highlight.textContent = editor.value;\n                highlight.style.display = 'block';\n                editor.style.display = 'none';\n                hljs.highlightElement(highlight);\n            });\n\n            // Trigger initial highlight\n            highlight.textContent = editor.value;\n            hljs.highlightElement(highlight);\n            highlight.style.display = 'block';\n            editor.style.display = 'none';\n        }\n\n        // Set up button event listeners\n        function setupButtons() {\n            const runButton = document.getElementById('run-button');\n            const shareButton = document.getElementById('share-button');\n            const aboutLink = document.getElementById('about-link');\n            const closeAbout = document.getElementById('close-about');\n            const aboutModal = document.getElementById('about-modal');\n\n            runButton.addEventListener('click', runCode);\n            shareButton.addEventListener('click', shareCode);\n\n            aboutLink.addEventListener('click', (e) => {\n                e.preventDefault();\n                aboutModal.style.display = 'flex';\n            });\n\n            closeAbout.addEventListener('click', () => {\n                aboutModal.style.display = 'none';\n            });\n        }\n\n        // Run the Python code\n        async function runCode() {\n            const code = document.getElementById('code-editor').value;\n            const output = document.getElementById('output-content');\n\n            output.innerHTML = '';\n\n            try {\n                // Capture print output\n                pyodide.setStdout({\n                    batched: (text) => {\n                        output.textContent += text;\n                    }\n                });\n\n                // Run the code\n                await pyodide.runPythonAsync(code);\n            } catch (e) {\n                output.textContent = e;\n            }\n        }\n\n        // Share the code by compressing it and adding to URL\n        function shareCode() {\n            const code = document.getElementById('code-editor').value;\n            const compressed = LZString.compressToEncodedURIComponent(code);\n\n            // Create new URL with code parameter\n            const url = new URL(window.location.href);\n            url.searchParams.set('code', compressed);\n\n            // Copy to clipboard\n            navigator.clipboard.writeText(url.toString())\n                .then(() => {\n                    // Show copied notification\n                    const notification = document.getElementById('copied-notification');\n                    notification.classList.add('show');\n                    setTimeout(() => {\n                        notification.classList.remove('show');\n                    }, 2000);\n                })\n                .catch(err => {\n                    console.error('Could not copy URL: ', err);\n                    alert('Could not copy URL to clipboard. Please copy it manually.');\n                });\n        }\n\n        // Load initial code from URL parameter or use default\n        function loadInitialCode() {\n            const urlParams = new URLSearchParams(window.location.search);\n            const codeParam = urlParams.get('code');\n\n            let code;\n            if (codeParam) {\n                code = LZString.decompressFromEncodedURIComponent(codeParam);\n            } else {\n                code = 'print(\"Hello, World!\")';\n            }\n\n            document.getElementById('code-editor').value = code;\n            document.getElementById('syntax-highlight').textContent = code;\n            hljs.highlightElement(document.getElementById('syntax-highlight'));\n        }\n\n        // Start the application\n        main();\n    </script>\n</body>\n</html>\n\n```"
    },
    {
      "role": "user",
      "content": "Fix the editor currently I cannot edit it. Also increase the contrast between the text fields background and the page background, doing a better theme work\nMake sure everything is kept in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "Here's an updated version of the HTML code that fixes the issue with the editor so you can edit it. I've also improved the contrast between the text fields' background and the page background for better readability. Here's the complete code in a single HTML file:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Python REPL</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/base16/dracula.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/lz-string@1.4.4/libs/lz-string.min.js\"></script>\n    <style>\n        body {\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            margin: 0;\n            padding: 0;\n            background-color: #282a36;\n            color: #f8f8f2;\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            flex: 1;\n            padding: 20px;\n            box-sizing: border-box;\n            max-width: 1200px;\n            margin: 0 auto;\n            width: 100%;\n        }\n        .editor-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 10px;\n        }\n        .output-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            background-color: #282a36;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            overflow: auto;\n        }\n        textarea {\n            flex: 1;\n            background-color: #3a3f48; /* Darker background for better contrast */\n            color: #f8f8f2;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            padding: 10px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n            resize: none;\n            outline: none;\n            margin-bottom: 10px;\n            white-space: pre;\n        }\n        textarea:focus {\n            border-color: #6272a4;\n        }\n        .hljs {\n            margin: 0;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #3a3f48; /* Darker background for better contrast */\n            overflow: auto;\n            flex: 1;\n        }\n        .button-container {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 10px;\n        }\n        button {\n            background-color: #50fa7b;\n            color: #282a36;\n            border: none;\n            border-radius: 5px;\n            padding: 8px 16px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        button:hover {\n            background-color: #5aff8d;\n        }\n        button:active {\n            transform: scale(0.98);\n        }\n        button.secondary {\n            background-color: #6272a4;\n            color: #f8f8f2;\n        }\n        button.secondary:hover {\n            background-color: #6a7cb0;\n        }\n        .output-title,\n        .editor-title {\n            color: #bd93f9;\n            margin-bottom: 5px;\n            font-size: 14px;\n        }\n        .copied {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: #50fa7b;\n            color: #282a36;\n            padding: 10px 15px;\n            border-radius: 5px;\n            font-weight: bold;\n            opacity: 0;\n            transition: opacity 0.3s;\n            pointer-events: none;\n        }\n        .copied.show {\n            opacity: 1;\n        }\n        #output-content {\n            padding: 10px;\n            white-space: pre-wrap;\n            overflow: auto;\n            flex: 1;\n            background-color: #282a36; /* Keep output area background consistent */\n        }\n        a {\n            color: #8be9fd;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        .loading {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            color: #6272a4;\n            font-size: 24px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Python REPL <small><a href=\"#\" id=\"about-link\">?</a></small></h1>\n\n        <div class=\"editor-container\">\n            <div class=\"editor-title\">Editor</div>\n            <div id=\"editor-wrapper\" style=\"flex: 1; display: flex; flex-direction: column;\">\n                <textarea id=\"code-editor\" spellcheck=\"false\"></textarea>\n                <pre id=\"syntax-highlight\" class=\"hljs language-python\" style=\"display: none;\"></pre>\n            </div>\n        </div>\n\n        <div class=\"button-container\">\n            <button id=\"run-button\">Run</button>\n            <button id=\"share-button\" class=\"secondary\">Share</button>\n        </div>\n\n        <div class=\"output-container\">\n            <div class=\"output-title\">Output</div>\n            <div id=\"output-content\"></div>\n        </div>\n    </div>\n\n    <div id=\"copied-notification\" class=\"copied\">Copied!</div>\n\n    <div id=\"loading\" class=\"loading\">Loading Pyodide...</div>\n\n    <div id=\"about-modal\" style=\"display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(40, 42, 54, 0.9); z-index: 100; justify-content: center; align-items: center;\">\n        <div style=\"background-color: #282a36; padding: 20px; border-radius: 5px; max-width: 600px; max-height: 80vh; overflow: auto;\">\n            <h2 style=\"margin-top: 0; color: #ff79c6;\">About Python REPL</h2>\n            <p>This is a browser-based Python REPL powered by Pyodide, which runs Python in the browser using WebAssembly.</p>\n            <p><strong>Features:</strong></p>\n            <ul>\n                <li>Write and execute Python code directly in your browser</li>\n                <li>Share your code snippets via URL</li>\n                <li>Syntax highlighting for Python</li>\n                <li>Works offline after initial load</li>\n            </ul>\n            <p><strong>Limitations:</strong></p>\n            <ul>\n                <li>No filesystem access</li>\n                <li>Limited standard library (Pyodide's subset)</li>\n                <li>Slower than native Python</li>\n            </ul>\n            <p>Built with ❤️   using <a href=\"https://pyodide.org/\" target=\"_blank\">Pyodide</a></p>\n            <button id=\"close-about\" style=\"margin-top: 20px;\">Close</button>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js\"></script>\n    <script>\n        // Initialize Pyodide\n        let pyodide;\n        async function main() {\n            pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/\"\n            });\n            document.getElementById('loading').style.display = 'none';\n\n            // Load initial code from URL or use default\n            loadInitialCode();\n\n            // Set up event listeners\n            setupEditor();\n            setupButtons();\n        }\n\n        // Set up editor with syntax highlighting\n        function setupEditor() {\n            const editor = document.getElementById('code-editor');\n            const highlight = document.getElementById('syntax-highlight');\n\n            // Show editable textarea and hide highlighted view\n            highlight.style.display = 'none';\n            editor.style.display = 'block';\n\n            // Enable editing and highlighting\n            editor.addEventListener('input', () => {\n                highlight.textContent = editor.value;\n                hljs.highlightElement(highlight);\n            });\n\n            // Trigger initial highlight\n            highlight.textContent = editor.value;\n            hljs.highlightElement(highlight);\n        }\n\n        // Set up button event listeners\n        function setupButtons() {\n            const runButton = document.getElementById('run-button');\n            const shareButton = document.getElementById('share-button');\n            const aboutLink = document.getElementById('about-link');\n            const closeAbout = document.getElementById('close-about');\n            const aboutModal = document.getElementById('about-modal');\n\n            runButton.addEventListener('click', runCode);\n            shareButton.addEventListener('click', shareCode);\n\n            aboutLink.addEventListener('click', (e) => {\n                e.preventDefault();\n                aboutModal.style.display = 'flex';\n            });\n\n            closeAbout.addEventListener('click', () => {\n                aboutModal.style.display = 'none';\n            });\n        }\n\n        // Run the Python code\n        async function runCode() {\n            const code = document.getElementById('code-editor').value;\n            const output = document.getElementById('output-content');\n\n            output.innerHTML = '';\n\n            try {\n                // Capture print output\n                pyodide.setStdout({\n                    batched: (text) => {\n                        output.textContent += text;\n                    }\n                });\n\n                // Run the code\n                await pyodide.runPythonAsync(code);\n            } catch (e) {\n                output.textContent = e;\n            }\n        }\n\n        // Share the code by compressing it and adding to URL\n        function shareCode() {\n            const code = document.getElementById('code-editor').value;\n            const compressed = LZString.compressToEncodedURIComponent(code);\n\n            // Create new URL with code parameter\n            const url = new URL(window.location.href);\n            url.searchParams.set('code', compressed);\n\n            // Copy to clipboard\n            navigator.clipboard.writeText(url.toString())\n                .then(() => {\n                    // Show copied notification\n                    const notification = document.getElementById('copied-notification');\n                    notification.classList.add('show');\n                    setTimeout(() => {\n                        notification.classList.remove('show');\n                    }, 2000);\n                })\n                .catch(err => {\n                    console.error('Could not copy URL: ', err);\n                    alert('Could not copy URL to clipboard. Please copy it manually.');\n                });\n        }\n\n        // Load initial code from URL parameter or use default\n        function loadInitialCode() {\n            const urlParams = new URLSearchParams(window.location.search);\n            const codeParam = urlParams.get('code');\n\n            let code;\n            if (codeParam) {\n                code = LZString.decompressFromEncodedURIComponent(codeParam);\n            } else {\n                code = 'print(\"Hello, World!\")';\n            }\n\n            document.getElementById('code-editor').value = code;\n            document.getElementById('syntax-highlight').textContent = code;\n            hljs.highlightElement(document.getElementById('syntax-highlight'));\n        }\n\n        // Start the application\n        main();\n    </script>\n</body>\n</html>\n```\n\n### Changes Made:\n1. **Editor Fix**: The `textarea` is now visible and editable immediately when the page loads and updates the syntax highlighting as you type.\n2. **Contrast Improvement**: The background color of the `textarea` and `pre` elements has been changed to `#3a3f48`, providing better contrast against the page background.\n3. **User Experience**: The syntax highlighting updates dynamically as you type in the editor.\n\nYou can now use this code as a standalone HTML file for your Python REPL web app."
    },
    {
      "role": "user",
      "content": "make the default python code instead of hello world, be something that takes the `emojis = [\"🍒\", \"🍋\", \"🍉\", \"⭐\", \"🔔\", \"🍇\", \"🍊\", \"🍓\"]` and simulates a 3 column slot machine, meaning pick 6 random of these emojis and check the matches of them 2 by two of the same columns, in 1000 trials measure how many\nMake sure everything is kept in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "Here's the updated HTML file. The default Python code simulates a 3-column slot machine that picks 6 random emojis from the provided list and checks for matches in pairs of columns over 1000 trials.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Python REPL</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/base16/dracula.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/lz-string@1.4.4/libs/lz-string.min.js\"></script>\n    <style>\n        body {\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            margin: 0;\n            padding: 0;\n            background-color: #282a36;\n            color: #f8f8f2;\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            flex: 1;\n            padding: 20px;\n            box-sizing: border-box;\n            max-width: 1200px;\n            margin: 0 auto;\n            width: 100%;\n        }\n        .editor-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 10px;\n        }\n        .output-container {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            background-color: #282a36;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            overflow: auto;\n        }\n        textarea {\n            flex: 1;\n            background-color: #3a3f48; /* Darker background for better contrast */\n            color: #f8f8f2;\n            border: 1px solid #44475a;\n            border-radius: 5px;\n            padding: 10px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-size: 14px;\n            line-height: 1.5;\n            resize: none;\n            outline: none;\n            margin-bottom: 10px;\n            white-space: pre;\n        }\n        textarea:focus {\n            border-color: #6272a4;\n        }\n        .hljs {\n            margin: 0;\n            padding: 10px;\n            border-radius: 5px;\n            background-color: #3a3f48; /* Darker background for better contrast */\n            overflow: auto;\n            flex: 1;\n        }\n        .button-container {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 10px;\n        }\n        button {\n            background-color: #50fa7b;\n            color: #282a36;\n            border: none;\n            border-radius: 5px;\n            padding: 8px 16px;\n            font-family: 'SF Mono', Monaco, 'Courier New', monospace;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        button:hover {\n            background-color: #5aff8d;\n        }\n        button:active {\n            transform: scale(0.98);\n        }\n        button.secondary {\n            background-color: #6272a4;\n            color: #f8f8f2;\n        }\n        button.secondary:hover {\n            background-color: #6a7cb0;\n        }\n        .output-title,\n        .editor-title {\n            color: #bd93f9;\n            margin-bottom: 5px;\n            font-size: 14px;\n        }\n        .copied {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background-color: #50fa7b;\n            color: #282a36;\n            padding: 10px 15px;\n            border-radius: 5px;\n            font-weight: bold;\n            opacity: 0;\n            transition: opacity 0.3s;\n            pointer-events: none;\n        }\n        .copied.show {\n            opacity: 1;\n        }\n        #output-content {\n            padding: 10px;\n            white-space: pre-wrap;\n            overflow: auto;\n            flex: 1;\n            background-color: #282a36; /* Keep output area background consistent */\n        }\n        a {\n            color: #8be9fd;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        .loading {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            color: #6272a4;\n            font-size: 24px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Python REPL <small><a href=\"#\" id=\"about-link\">?</a></small></h1>\n\n        <div class=\"editor-container\">\n            <div class=\"editor-title\">Editor</div>\n            <div id=\"editor-wrapper\" style=\"flex: 1; display: flex; flex-direction: column;\">\n                <textarea id=\"code-editor\" spellcheck=\"false\"></textarea>\n                <pre id=\"syntax-highlight\" class=\"hljs language-python\" style=\"display: none;\"></pre>\n            </div>\n        </div>\n\n        <div class=\"button-container\">\n            <button id=\"run-button\">Run</button>\n            <button id=\"share-button\" class=\"secondary\">Share</button>\n        </div>\n\n        <div class=\"output-container\">\n            <div class=\"output-title\">Output</div>\n            <div id=\"output-content\"></div>\n        </div>\n    </div>\n\n    <div id=\"copied-notification\" class=\"copied\">Copied!</div>\n\n    <div id=\"loading\" class=\"loading\">Loading Pyodide...</div>\n\n    <div id=\"about-modal\" style=\"display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(40, 42, 54, 0.9); z-index: 100; justify-content: center; align-items: center;\">\n        <div style=\"background-color: #282a36; padding: 20px; border-radius: 5px; max-width: 600px; max-height: 80vh; overflow: auto;\">\n            <h2 style=\"margin-top: 0; color: #ff79c6;\">About Python REPL</h2>\n            <p>This is a browser-based Python REPL powered by Pyodide, which runs Python in the browser using WebAssembly.</p>\n            <p><strong>Features:</strong></p>\n            <ul>\n                <li>Write and execute Python code directly in your browser</li>\n                <li>Share your code snippets via URL</li>\n                <li>Syntax highlighting for Python</li>\n                <li>Works offline after initial load</li>\n            </ul>\n            <p><strong>Limitations:</strong></p>\n            <ul>\n                <li>No filesystem access</li>\n                <li>Limited standard library (Pyodide's subset)</li>\n                <li>Slower than native Python</li>\n            </ul>\n            <p>Built with ❤️   using <a href=\"https://pyodide.org/\" target=\"_blank\">Pyodide</a></p>\n            <button id=\"close-about\" style=\"margin-top: 20px;\">Close</button>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js\"></script>\n    <script>\n        // Initialize Pyodide\n        let pyodide;\n        async function main() {\n            pyodide = await loadPyodide({\n                indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.23.4/full/\"\n            });\n            document.getElementById('loading').style.display = 'none';\n\n            // Load initial code from URL or set default\n            loadInitialCode();\n\n            // Set up event listeners\n            setupEditor();\n            setupButtons();\n        }\n\n        // Set up editor with syntax highlighting\n        function setupEditor() {\n            const editor = document.getElementById('code-editor');\n            const highlight = document.getElementById('syntax-highlight');\n\n            // Show editable textarea and hide highlighted view\n            highlight.style.display = 'none';\n            editor.style.display = 'block';\n\n            // Enable editing and highlighting\n            editor.addEventListener('input', () => {\n                highlight.textContent = editor.value;\n                hljs.highlightElement(highlight);\n            });\n\n            // Trigger initial highlight\n            highlight.textContent = editor.value;\n            hljs.highlightElement(highlight);\n        }\n\n        // Set up button event listeners\n        function setupButtons() {\n            const runButton = document.getElementById('run-button');\n            const shareButton = document.getElementById('share-button');\n            const aboutLink = document.getElementById('about-link');\n            const closeAbout = document.getElementById('close-about');\n            const aboutModal = document.getElementById('about-modal');\n\n            runButton.addEventListener('click', runCode);\n            shareButton.addEventListener('click', shareCode);\n\n            aboutLink.addEventListener('click', (e) => {\n                e.preventDefault();\n                aboutModal.style.display = 'flex';\n            });\n\n            closeAbout.addEventListener('click', () => {\n                aboutModal.style.display = 'none';\n            });\n        }\n\n        // Run the Python code\n        async function runCode() {\n            const code = document.getElementById('code-editor').value;\n            const output = document.getElementById('output-content');\n\n            output.innerHTML = '';\n\n            try {\n                // Capture print output\n                pyodide.setStdout({\n                    batched: (text) => {\n                        output.textContent += text;\n                    }\n                });\n\n                // Run the code\n                await pyodide.runPythonAsync(code);\n            } catch (e) {\n                output.textContent = e;\n            }\n        }\n\n        // Share the code by compressing it and adding to URL\n        function shareCode() {\n            const code = document.getElementById('code-editor').value;\n            const compressed = LZString.compressToEncodedURIComponent(code);\n\n            // Create new URL with code parameter\n            const url = new URL(window.location.href);\n            url.searchParams.set('code', compressed);\n\n            // Copy to clipboard\n            navigator.clipboard.writeText(url.toString())\n                .then(() => {\n                    // Show copied notification\n                    const notification = document.getElementById('copied-notification');\n                    notification.classList.add('show');\n                    setTimeout(() => {\n                        notification.classList.remove('show');\n                    }, 2000);\n                })\n                .catch(err => {\n                    console.error('Could not copy URL: ', err);\n                    alert('Could not copy URL to clipboard. Please copy it manually.');\n                });\n        }\n\n        // Load initial code from URL parameter or use default\n        function loadInitialCode() {\n            const urlParams = new URLSearchParams(window.location.search);\n            const codeParam = urlParams.get('code');\n\n            let code;\n            if (codeParam) {\n                code = LZString.decompressFromEncodedURIComponent(codeParam);\n            } else {\n                // Default code for slot machine simulation\n                code = `\nimport random\n\nemojis = [\"🍒\", \"🍋\", \"🍉\", \"⭐\", \"🔔\", \"🍇\", \"🍊\", \"🍓\"]\n\ndef slot_machine_simulation(trials=1000):\n    matches = [0, 0, 0]  # Counters for matches in each column\n\n    for _ in range(trials):\n        # Select 6 random emojis for 3 columns (2 each)\n        selections = [random.choice(emojis) for _ in range(6)]\n        column1 = selections[0:2]\n        column2 = selections[2:4]\n        column3 = selections[4:6]\n        \n        # Check for matches in pairs of columns\n        if column1[0] == column1[1]:\n            matches[0] += 1\n        if column2[0] == column2[1]:\n            matches[1] += 1\n        if column3[0] == column3[1]:\n            matches[2] += 1\n            \n    return matches\n\n# Run the simulation\nresults = slot_machine_simulation()\nprint(\"Matches in each column:\", results)\n                `;\n            }\n\n            document.getElementById('code-editor').value = code;\n            document.getElementById('syntax-highlight').textContent = code;\n            hljs.highlightElement(document.getElementById('syntax-highlight'));\n        }\n\n        // Start the application\n        main();\n    </script>\n</body>\n</html>\n```\n\n### Changes Made:\n1. **Default Code**: The default code in the editor is now a Python snippet that simulates a 3-column slot machine using the given emojis. It runs 1000 trials and counts matches in each column.\n2. **Functionality**: The code defines a function `slot_machine_simulation()` that performs the emoji selection and matching logic.\n\nYou can use this code directly as a standalone HTML file for your Python REPL web app."
    }
  ]
}