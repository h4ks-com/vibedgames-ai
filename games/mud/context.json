{
  "messages": [
    {
      "role": "user",
      "content": "a small multi user dungeon using websockets and arbitrary backend consisting of rooms, titles, descriptions, and the ability to use cardinal directions for movement (north, south, east, west, up, down)\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Mini MUD WebSocket Client</title>\n<style>\n  body {\n    font-family: monospace, monospace;\n    background: #111;\n    color: #eee;\n    margin: 0; padding: 0; display: flex; flex-direction: column; height: 100vh;\n  }\n  #output {\n    background: #222;\n    padding: 1rem;\n    flex: 1 1 auto;\n    overflow-y: auto;\n    white-space: pre-wrap;\n  }\n  #input-form {\n    display: flex;\n    border-top: 1px solid #444;\n  }\n  #input {\n    flex: 1 1 auto;\n    font-family: monospace;\n    font-size: 1rem;\n    padding: 0.5rem;\n    border: none;\n    background: #111;\n    color: #eee;\n  }\n  #input:focus {\n    outline: none;\n  }\n  #send-button {\n    background: #33aa33;\n    color: #111;\n    border: none;\n    padding: 0 1rem;\n    font-weight: bold;\n    cursor: pointer;\n  }\n  #send-button:disabled {\n    background: #666;\n    cursor: not-allowed;\n  }\n  #status {\n    font-size: 0.8rem;\n    background: #222;\n    padding: 0.3rem 1rem;\n    color: #ccc;\n  }\n</style>\n</head>\n<body>\n<div id=\"status\">Connecting to the server...</div>\n<div id=\"output\"></div>\n<form id=\"input-form\">\n  <input id=\"input\" autocomplete=\"off\" placeholder=\"Enter command (e.g., north, look)\" />\n  <button id=\"send-button\" type=\"submit\" disabled>Send</button>\n</form>\n\n<script>\n(() => {\n  /**\n   * This is a minimal multi-user dungeon client that connects to a backend via WebSocket.\n   * The backend must implement a simple protocol:\n   * - On connection, server sends a JSON describing initial room:\n   *   { type: \"room\", title: \"...\", description: \"...\", exits: { north: \"roomId\", ... } }\n   * - When client sends a command (e.g., \"north\", \"look\"), server responds with a room update or message:\n   *   { type: \"room\", title: \"...\", description: \"...\", exits: { ... } } OR\n   *   { type: \"message\", text: \"You can't go that way.\" }\n   * \n   * The client shows the room title, description, exits, and chat-like messages.\n   */\n\n  // Replace with your actual backend WebSocket URL\n  const WS_URL = \"wss://your-mud-backend.example/ws\";\n\n  const statusEl = document.getElementById(\"status\");\n  const outputEl = document.getElementById(\"output\");\n  const inputForm = document.getElementById(\"input-form\");\n  const inputEl = document.getElementById(\"input\");\n  const sendButton = document.getElementById(\"send-button\");\n\n  let socket = null;\n  let connected = false;\n\n  // Print message to output area (with optional class for styling)\n  function printLine(text, className) {\n    const div = document.createElement(\"div\");\n    if (className) div.className = className;\n    div.textContent = text;\n    outputEl.appendChild(div);\n    outputEl.scrollTop = outputEl.scrollHeight;\n  }\n\n  // Render room info\n  function renderRoom(room) {\n    outputEl.innerHTML = \"\"; // clear previous\n    printLine(room.title, \"room-title\");\n    printLine(room.description);\n    const exits = Object.keys(room.exits || {});\n    printLine(\"\");\n    if (exits.length === 0) {\n      printLine(\"There are no obvious exits.\");\n    } else {\n      printLine(\"Exits: \" + exits.map(e => e.toUpperCase()).join(\", \"));\n    }\n    outputEl.scrollTop = outputEl.scrollHeight;\n  }\n\n  // Render informational messages\n  function renderMessage(text) {\n    printLine(text, \"message\");\n  }\n\n  // Connect to backend\n  function connect() {\n    socket = new WebSocket(WS_URL);\n    statusEl.textContent = \"Connecting to server...\";\n    sendButton.disabled = true;\n    inputEl.disabled = true;\n\n    socket.addEventListener(\"open\", () => {\n      connected = true;\n      statusEl.textContent = \"Connected. Use directions: north, south, east, west, up, down or 'look'.\";\n      sendButton.disabled = false;\n      inputEl.disabled = false;\n      inputEl.focus();\n    });\n\n    socket.addEventListener(\"message\", evt => {\n      try {\n        const msg = JSON.parse(evt.data);\n        if (msg.type === \"room\") {\n          renderRoom(msg);\n        } else if (msg.type === \"message\") {\n          renderMessage(msg.text);\n        } else {\n          renderMessage(\"Unknown message from server: \" + evt.data);\n        }\n      } catch(e) {\n        renderMessage(\"Error parsing message from server: \" + evt.data);\n      }\n    });\n\n    socket.addEventListener(\"close\", () => {\n      connected = false;\n      statusEl.textContent = \"Disconnected from server.\";\n      sendButton.disabled = true;\n      inputEl.disabled = true;\n    });\n\n    socket.addEventListener(\"error\", () => {\n      statusEl.textContent = \"Connection error.\";\n    });\n  }\n\n  inputForm.addEventListener(\"submit\", evt => {\n    evt.preventDefault();\n    if (!connected) return;\n    const cmd = inputEl.value.trim();\n    if (!cmd) return;\n    printLine(\"> \" + cmd, \"user-command\");\n    try {\n      socket.send(cmd);\n    } catch (e) {\n      printLine(\"Error sending command.\");\n    }\n    inputEl.value = \"\";\n  });\n\n  // Start connection\n  connect();\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}