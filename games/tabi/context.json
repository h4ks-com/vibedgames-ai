{
  "messages": [
    {
      "role": "user",
      "content": "browser page begins with unique ID based on random number and current time click a link to open a new browser tab with the same content but an individual unique ID based on the origin page and current time\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Unique ID Page</title>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    margin: 2rem;\n    background: #f0f4f8;\n    color: #333;\n  }\n  header {\n    margin-bottom: 1.5rem;\n  }\n  h1 {\n    margin: 0 0 0.5rem 0;\n    font-size: 1.8rem;\n  }\n  #unique-id {\n    font-weight: bold;\n    color: #1a73e8;\n  }\n  a.button {\n    display: inline-block;\n    margin-top: 1.5rem;\n    padding: 0.5rem 1rem;\n    text-decoration: none;\n    background: #1a73e8;\n    color: white;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n    user-select: none;\n  }\n  a.button:hover, a.button:focus {\n    background: #155ab6;\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>Unique Page ID</h1>\n  <div>This page's unique ID is: <span id=\"unique-id\"></span></div>\n</header>\n\n<a href=\"#\" id=\"open-new-tab\" class=\"button\">Open New Tab with Derived Unique ID</a>\n\n<script>\n(() => {\n  // Helper: Generate a random integer 0 <= n < max\n  function randInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  // Generate a unique ID based on random number + current time, format: <random 8 hex digits>-<timestamp in ms base36>\n  function generateRootId() {\n    // random 4 bytes hex\n    const r = randInt(0xffffffff).toString(16).padStart(8,\"0\");\n    const t = Date.now().toString(36);\n    return r + '-' + t;\n  }\n\n  // Generate a derived unique ID based on originID + current time\n  // Format: originID + substr(hash) + timestamp-base36\n  // Hash originID with simple hash function (FNV-1a 32bit) for a short hex string\n  function fnv1aHash(str) {\n    let hash = 2166136261;\n    for(let i=0; i < str.length; i++) {\n      hash ^= str.charCodeAt(i);\n      hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    // convert to unsigned 32bit\n    return (hash >>> 0).toString(16).padStart(8, \"0\");\n  }\n\n  function generateDerivedId(originId) {\n    const hash = fnv1aHash(originId).slice(0,6); // 6 hex chars hash fragment\n    const t = Date.now().toString(36);\n    return originId + '-' + hash + '-' + t;\n  }\n\n  // Location hash will store the unique id for the page\n  // If no hash, generate a root id and set location.hash = rootId (using history.replaceState)\n  // If hash exists, show it\n\n  function getIdFromHash() {\n    let h = location.hash;\n    if(h && h.startsWith('#') && h.length > 1) {\n      return decodeURIComponent(h.slice(1));\n    }\n    return null;\n  }\n\n  function setHashId(id, replace = false) {\n    const newHash = '#' + encodeURIComponent(id);\n    if(replace) {\n      history.replaceState(null, '', newHash);\n    } else {\n      location.hash = newHash;\n    }\n  }\n\n  // Initialize\n  let currentId = getIdFromHash();\n  if(!currentId) {\n    currentId = generateRootId();\n    setHashId(currentId, true);\n  }\n\n  // Show ID in UI\n  const idSpan = document.getElementById('unique-id');\n  idSpan.textContent = currentId;\n\n  // On click open new tab with derived ID\n  document.getElementById('open-new-tab').addEventListener('click', e => {\n    e.preventDefault();\n    const newId = generateDerivedId(currentId);\n    // Construct URL with new hash\n    const url = location.origin + location.pathname + '#' + encodeURIComponent(newId);\n    window.open(url, '_blank');\n  });\n})();\n</script>\n</body>\n</html>\n```"
    },
    {
      "role": "user",
      "content": "instead of merely concatenating the new ID information, the ID string should always be exactly 64 alphanumeric characters. add a hashing function to ensure that new tabs based on the previous ID and current time have these 64-character IDs while also remaining unique for each individual tab\nMake sure everything is kept in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>64-Character Unique ID Page</title>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    margin: 2rem;\n    background: #f0f4f8;\n    color: #333;\n  }\n  header {\n    margin-bottom: 1.5rem;\n  }\n  h1 {\n    margin: 0 0 0.5rem 0;\n    font-size: 1.8rem;\n  }\n  #unique-id {\n    font-weight: bold;\n    color: #1a73e8;\n    font-family: 'Courier New', Courier, monospace;\n    word-break: break-all;\n  }\n  a.button {\n    display: inline-block;\n    margin-top: 1.5rem;\n    padding: 0.5rem 1rem;\n    text-decoration: none;\n    background: #1a73e8;\n    color: white;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n    user-select: none;\n  }\n  a.button:hover, a.button:focus {\n    background: #155ab6;\n  }\n</style>\n</head>\n<body>\n<header>\n  <h1>64-Character Unique Page ID</h1>\n  <div>This page's unique ID is:<br/><code id=\"unique-id\"></code></div>\n</header>\n\n<a href=\"#\" id=\"open-new-tab\" class=\"button\">Open New Tab with Derived Unique ID</a>\n\n<script>\n(() => {\n  // Base64 URL-safe alphabet for encoding\n  const base64urlChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n  // Generate random bytes\n  function randomBytes(length) {\n    if (window.crypto && window.crypto.getRandomValues) {\n      const arr = new Uint8Array(length);\n      window.crypto.getRandomValues(arr);\n      return arr;\n    }\n    // fallback (not cryptographically secure)\n    const arr = new Uint8Array(length);\n    for(let i=0;i<length;i++) arr[i] = Math.floor(Math.random()*256);\n    return arr;\n  }\n\n  // Convert byte array (Uint8Array) to base64url string (without padding)\n  function bytesToBase64Url(bytes) {\n    let binary = '';\n    for (let i = 0; i < bytes.length; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    let base64 = btoa(binary);\n    // Convert base64 to base64url\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n\n  // Convert ArrayBuffer/Uint8Array to string UTF-8 encoded\n  function ab2str(buf) {\n    return new TextDecoder().decode(buf);\n  }\n\n  // Convert string to Uint8Array UTF-8 encoded\n  function str2ab(str) {\n    return new TextEncoder().encode(str);\n  }\n\n  // Async SHA-256 hashing of a Uint8Array or string (returns Uint8Array)\n  async function sha256(data) {\n    let buffer;\n    if (data instanceof Uint8Array) {\n      buffer = data.buffer;\n    } else if (typeof data === \"string\") {\n      buffer = str2ab(data).buffer;\n    } else if (data instanceof ArrayBuffer) {\n      buffer = data;\n    } else {\n      throw new Error(\"Unsupported data type for sha256\");\n    }\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    return new Uint8Array(hashBuffer);\n  }\n\n  // Encode Uint8Array to base64url with custom length control\n  // We want exactly 64 alphanumeric chars from [A-Za-z0-9] (no symbols)\n  // Base64url has - and _, so we must convert those to alphanumeric safely:\n  // Let's create a custom base62 encoding from the SHA256 output.\n  // SHA256 is 32 bytes = 256 bits.\n  // Base62 uses 62 possible chars => each char encodes ~5.954 bits.\n  // To make length 64 chars at base62 encoding => 64 * 5.954 = 380.9 bits needed,\n  // but SHA256 only 256 bits.\n  // We'll do: hash origin+time + random salt (at least 6 bytes), so total input around 38 bytes.\n  // Then hash that, and encode to base62 to get 64 chars output.\n\n  // So we need base62 encoding function:\n  const base62chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n  // Converts Uint8Array to a BigInt\n  function bytesToBigInt(bytes) {\n    let bi = 0n;\n    for(let i = 0; i < bytes.length; i++) {\n      bi = (bi << 8n) + BigInt(bytes[i]);\n    }\n    return bi;\n  }\n\n  // Convert BigInt to base62 string of fixed length by padding:\n  function bigIntToBase62(bi, length) {\n    let base = 62n;\n    let chars = [];\n    while(bi > 0n) {\n      let rem = bi % base;\n      bi = bi / base;\n      chars.push(base62chars[Number(rem)]);\n    }\n    while(chars.length < length) chars.push('0'); // pad with '0'\n    return chars.reverse().join('');\n  }\n\n  // Derive 64-char alphanumeric ID from arbitrary input string\n  // by hashing input + random salt, then base62 encoding\n  async function deriveId(inputStr) {\n    // inputStr + timestamp + 6 random bytes\n    const timestamp = Date.now().toString();\n    // Generate 6 random bytes salt (~48 bits)\n    const salt = randomBytes(6);\n    // Compose input buffer: inputStr UTF8 bytes + timestamp UTF8 bytes + salt\n    const inputBytes = str2ab(inputStr + timestamp);\n    const combined = new Uint8Array(inputBytes.length + salt.length);\n    combined.set(inputBytes, 0);\n    combined.set(salt, inputBytes.length);\n\n    // Hash combined input\n    const hash = await sha256(combined);\n\n    // Convert hash (32 bytes) + salt(6 bytes) = 38 bytes total\n    const totalBytes = new Uint8Array(hash.length + salt.length);\n    totalBytes.set(hash, 0);\n    totalBytes.set(salt, hash.length);\n    // totalBytes length = 38 bytes = 304 bits\n\n    const bi = bytesToBigInt(totalBytes);\n\n    // base62 encode to 64 chars (64 chars * ~5.95 bits = 380 bits, we have 304 bits, so pad)\n    // The number might be shorter, so pad with zeros to length 64\n    return bigIntToBase62(bi, 64);\n  }\n\n  // Generate root ID similarly: random 38 bytes -> base62 to 64 chars\n  async function generateRootId() {\n    // random 38 bytes\n    const rand = randomBytes(38);\n    const bi = bytesToBigInt(rand);\n    return bigIntToBase62(bi, 64);\n  }\n\n  // Get current ID from location.hash (expect 64 chars alphanumeric)\n  function getIdFromHash() {\n    let h = location.hash;\n    if (h && h.startsWith('#') && h.length > 1) {\n      const id = decodeURIComponent(h.slice(1));\n      if (/^[0-9A-Za-z]{64}$/.test(id)) return id;\n    }\n    return null;\n  }\n\n  // Set or replace location.hash\n  function setHashId(id, replace = false) {\n    if (replace) {\n      history.replaceState(null, '', '#' + encodeURIComponent(id));\n    } else {\n      location.hash = '#' + encodeURIComponent(id);\n    }\n  }\n\n  async function main() {\n    let currentId = getIdFromHash();\n    if (!currentId) {\n      currentId = await generateRootId();\n      setHashId(currentId, true);\n    }\n\n    const idSpan = document.getElementById('unique-id');\n    idSpan.textContent = currentId;\n\n    document.getElementById('open-new-tab').addEventListener('click', async e => {\n      e.preventDefault();\n\n      // Derive new ID from currentId + current time\n      const newId = await deriveId(currentId);\n\n      const url = location.origin + location.pathname + '#' + encodeURIComponent(newId);\n      window.open(url, '_blank');\n    });\n  }\n\n  main();\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}