{
  "messages": [
    {
      "role": "user",
      "content": "draw 100 random lindenmeyer trees\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "Creating a web app that draws 100 random Lindenmayer trees involves using HTML, CSS, and JavaScript. Below is a complete code block that you can use to create this web app. The trees will be generated using the HTML5 canvas.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Lindenmayer Trees</title>\n    <style>\n        body {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        canvas {\n            border: 1px solid #ccc;\n            margin: 5px;\n        }\n    </style>\n</head>\n<body>\n    <script>\n        function drawTree(ctx, axiom, rules, angle, depth, length) {\n            const stack = [];\n            let current = axiom;\n\n            for (let i = 0; i < depth; i++) {\n                let next = '';\n                for (let char of current) {\n                    next += rules[char] || char;\n                }\n                current = next;\n            }\n\n            ctx.save();\n            ctx.translate(ctx.canvas.width / 2, ctx.canvas.height);\n            ctx.strokeStyle = 'green';\n            ctx.lineWidth = 2;\n\n            for (let char of current) {\n                if (char === 'F') {\n                    ctx.beginPath();\n                    ctx.moveTo(0, 0);\n                    ctx.lineTo(0, -length);\n                    ctx.stroke();\n                    ctx.translate(0, -length);\n                } else if (char === '+') {\n                    ctx.rotate(angle);\n                } else if (char === '-') {\n                    ctx.rotate(-angle);\n                } else if (char === '[') {\n                    stack.push({ x: ctx.getTransform().e, y: ctx.getTransform().f, angle: ctx.getTransform().rotation });\n                } else if (char === ']') {\n                    const { x, y, angle } = stack.pop();\n                    ctx.setTransform(1, 0, 0, 1, x, y);\n                    ctx.rotate(angle);\n                }\n            }\n\n            ctx.restore();\n        }\n\n        function getRandomTree() {\n            const axiom = 'F';\n            const rules = {\n                'F': Math.random() > 0.5 ? 'F[+F]F[-F]' : 'FF'\n            };\n            const angle = Math.random() * Math.PI / 4 + Math.PI / 8; // Random angle between 22.5 and 45 degrees\n            const depth = Math.floor(Math.random() * 4) + 4; // Random depth between 4 and 7\n            const length = Math.random() * 30 + 20; // Random length between 20 and 50\n\n            return { axiom, rules, angle, depth, length };\n        }\n\n        function drawRandomTrees(numTrees) {\n            for (let i = 0; i < numTrees; i++) {\n                const canvas = document.createElement('canvas');\n                canvas.width = 200;\n                canvas.height = 200;\n                document.body.appendChild(canvas);\n                const ctx = canvas.getContext('2d');\n                const tree = getRandomTree();\n                drawTree(ctx, tree.axiom, tree.rules, tree.angle, tree.depth, tree.length);\n            }\n        }\n\n        drawRandomTrees(100);\n    </script>\n</body>\n</html>\n```\n\n### Explanation:\n- **HTML Structure**: The document has a simple structure with a `head` and `body`. The body is where the canvases for the trees will be appended.\n- **CSS Styles**: The styles center the canvases and give them a border.\n- **JavaScript Functions**:\n  - `drawTree`: This function takes parameters to draw a single Lindenmayer tree based on the provided axiom, rules, angle, depth, and length.\n  - `getRandomTree`: This function generates a random Lindenmayer tree configuration.\n  - `drawRandomTrees`: This function creates 100 canvases and draws a random tree on each.\n\nYou can copy and paste this code into an HTML file and open it in a web browser to see the random Lindenmayer trees being drawn."
    }
  ]
}