{
  "messages": [
    {
      "role": "user",
      "content": "write a small roguelike game with randomly generated items\nMake sure everything is in a single HTML file with embedded CSS and JS in a single code block to be used as a web app."
    },
    {
      "role": "assistant",
      "content": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Mini Roguelike</title>\n<style>\n  body {\n    background-color: #111;\n    color: #eee;\n    font-family: monospace, monospace;\n    margin: 0;\n    padding: 0;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100vh;\n    user-select: none;\n  }\n  #game {\n    margin-top: 10px;\n    line-height: 1;\n  }\n  #map {\n    background-color: #222;\n    border: 2px solid #666;\n    display: inline-block;\n    image-rendering: pixelated;\n  }\n  #log {\n    width: 480px;\n    height: 120px;\n    background-color: #222;\n    border: 2px solid #666;\n    margin-top: 10px;\n    overflow-y: auto;\n    padding: 4px;\n    font-size: 0.9rem;\n  }\n  #stats {\n    margin-top: 6px;\n    border: 2px solid #666;\n    padding: 6px 12px;\n    width: 480px;\n    background-color: #222;\n  }\n  .tile {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    font-weight: bold;\n    text-align: center;\n    vertical-align: middle;\n    line-height: 16px;\n    font-size: 16px;\n  }\n  .wall { color: #888; }\n  .floor { color: #ccc; }\n  .player { color: #0f0; }\n  .item { color: #ff0; }\n  .enemy { color: #f66; }\n</style>\n</head>\n<body>\n<h1>Mini Roguelike</h1>\n\n<div id=\"game\">\n  <div id=\"map\"></div>\n  <div id=\"stats\"></div>\n  <div id=\"log\"></div>\n</div>\n\n<script>\n(() => {\n  const mapWidth = 30;\n  const mapHeight = 20;\n\n  // Tiles:\n  // '#' = wall\n  // '.' = floor\n  // Player = '@'\n  // Enemies = 'E'\n  // Items = letters or '*'\n\n  let map = [];\n  let player = {x:1, y:1, hp: 20, maxHp: 20, atk: 5, def: 2, inventory: []};\n  let enemies = [];\n  let items = [];\n\n  // Random helpers\n  function randInt(min, max) {\n    return Math.floor(Math.random()*(max-min+1)) + min;\n  }\n\n  // Map generation: simple room with random walls around\n\n  function generateMap() {\n    // Fill with floor\n    map = [];\n    for(let y=0; y<mapHeight; y++) {\n      let row = [];\n      for(let x=0; x<mapWidth; x++) {\n        if (x === 0 || y === 0 || x === mapWidth-1 || y === mapHeight-1) {\n          row.push('#'); // border wall\n        } else {\n          row.push('.');\n        }\n      }\n      map.push(row);\n    }\n\n    // add random inner walls\n    for(let i=0; i<70; i++) {\n      let wx = randInt(1, mapWidth-2);\n      let wy = randInt(1, mapHeight-2);\n      map[wy][wx] = '#';\n    }\n  }\n\n  // Check if tile is walkable\n  function isWalkable(x,y) {\n    if(x < 0 || y < 0 || x >= mapWidth || y >= mapHeight) return false;\n    if(map[y][x] === '#') return false;\n    for (let e of enemies) if(e.x === x && e.y === y) return false;\n    return true;\n  }\n\n  // Items definition and random generation\n\n  const itemTypes = [\n    {name:\"Health Potion\", symbol:\"!\", effect:(player)=> {player.hp = Math.min(player.maxHp, player.hp+10); log(\"You drink the Health Potion. +10 HP.\");}},\n    {name:\"Sword\", symbol:\"/\", effect:null, atkBonus: 3},\n    {name:\"Shield\", symbol:\"[\", effect:null, defBonus: 2},\n    {name:\"Armor\", symbol:\"(\", effect:null, defBonus: 3},\n    {name:\"Gold Coin\", symbol:\"$\", effect:(player)=> {log(\"Just some shiny coin.\");}},\n    {name:\"Fire Scroll\", symbol:\"~\", effect:(player,enemy)=>{enemy.hp -= 8; log(\"You cast fire scroll and burn the enemy for 8 damage!\");}},\n  ];\n\n  function createRandomItem(x,y) {\n    const baseItem = itemTypes[randInt(0, itemTypes.length-1)];\n    // Clone object so each item is unique (for inventory)\n    const newItem = {...baseItem, x, y};\n    if (!newItem.atkBonus) newItem.atkBonus = 0;\n    if (!newItem.defBonus) newItem.defBonus = 0;\n    return newItem;\n  }\n\n  // Enemies generation\n\n  function createEnemy(x,y) {\n    return {x, y, hp: 10, atk: 3, def: 1};\n  }\n\n  // Place enemies randomly free places\n  function populateEnemies(count) {\n    enemies = [];\n    let tries = 0;\n    while(enemies.length < count && tries < 200) {\n      let x = randInt(1, mapWidth-2);\n      let y = randInt(1, mapHeight-2);\n      if(map[y][x] === '.' && !(player.x === x && player.y === y) && !enemies.some(e=>e.x===x && e.y===y)) {\n        enemies.push(createEnemy(x,y));\n      }\n      tries++;\n    }\n  }\n\n  // Place items randomly free places\n  function populateItems(count) {\n    items = [];\n    let tries = 0;\n    while(items.length < count && tries < 200) {\n      let x = randInt(1, mapWidth-2);\n      let y = randInt(1, mapHeight-2);\n      if(map[y][x] === '.' && !(player.x === x && player.y === y) && !items.some(i=>i.x===x && i.y===y) && !enemies.some(e=>e.x===x && e.y===y)) {\n        items.push(createRandomItem(x,y));\n      }\n      tries++;\n    }\n  }\n\n  // Logging helper\n  function log(txt) {\n    const logDiv = document.getElementById('log');\n    logDiv.textContent += txt + '\\n';\n    logDiv.scrollTop = logDiv.scrollHeight;\n  }\n\n  // Draw map and entities\n\n  function draw() {\n    const mapDiv = document.getElementById('map');\n    // clear\n    mapDiv.innerHTML = '';\n    for(let y=0; y<mapHeight; y++) {\n      for(let x=0; x<mapWidth; x++) {\n        let span = document.createElement('span');\n        span.classList.add('tile');\n        let ch = map[y][x];\n        if (ch === '#') span.classList.add('wall');\n        else span.classList.add('floor');\n\n        // Check if player here\n        if(player.x === x && player.y === y) {\n          span.textContent = '@';\n          span.classList.add('player');\n        } else {\n          // Check if enemy here\n          let enemyHere = enemies.find(e=>e.x===x && e.y===y);\n          if(enemyHere) {\n            span.textContent = 'E';\n            span.classList.add('enemy');\n          } else {\n            // Check if item here\n            let itemHere = items.find(i=>i.x===x && i.y===y);\n            if(itemHere) {\n              span.textContent = itemHere.symbol;\n              span.classList.add('item');\n              span.title = itemHere.name;\n            } else {\n              span.textContent = ch;\n            }\n          }\n        }\n        mapDiv.appendChild(span);\n      }\n      // line break\n      mapDiv.appendChild(document.createElement('br'));\n    }\n    updateStats();\n  }\n\n  // Update stats panel\n\n  function updateStats() {\n    const statsDiv = document.getElementById('stats');\n    let invNames = player.inventory.map(i=>{\n      let name = i.name;\n      if(i.atkBonus) name += ` (Atk+${i.atkBonus})`;\n      if(i.defBonus) name += ` (Def+${i.defBonus})`;\n      return name;\n    });\n    let statsHtml = `\n    HP: ${player.hp} / ${player.maxHp} | Atk: ${player.atk} | Def: ${player.def} <br />\n    Inventory (${player.inventory.length}): ${invNames.length > 0 ? invNames.join(', ') : \"Empty\"}\n    <br>\n    Use arrow keys or WASD to move. Press 'G' to pick up item. Press 'U' to use Health Potion. \n    `;\n    statsDiv.innerHTML = statsHtml;\n  }\n\n  // Player attack enemy\n\n  function playerAttack(enemy) {\n    let damage = Math.max(0, player.atk - enemy.def);\n    enemy.hp -= damage;\n    log(`You hit the enemy for ${damage} damage.`);\n    if(enemy.hp <= 0) {\n      log(\"Enemy is killed!\");\n      enemies = enemies.filter(e=>e!==enemy);\n      return true;\n    }\n    return false;\n  }\n\n  // Enemy AI for one turn: moves towards player if close, else random move\n\n  function enemyTurn() {\n    for(let e of enemies) {\n      if(Math.abs(e.x - player.x) + Math.abs(e.y - player.y) === 1) {\n        // attack player\n        let dmg = Math.max(0, e.atk - player.def);\n        player.hp -= dmg;\n        log(`Enemy hits you for ${dmg} damage!`);\n        if(player.hp <= 0) {\n          log(\"You died! Game over.\");\n          window.removeEventListener('keydown', keyHandler);\n        }\n        continue;\n      }\n\n      // Move enemy closer if possible\n      let dx = 0, dy =0;\n      if(e.x < player.x) dx = 1;\n      else if(e.x > player.x) dx = -1;\n      if(e.y < player.y) dy = 1;\n      else if(e.y > player.y) dy = -1;\n\n      // try move in dx,0 or 0,dy or dx,dy order\n      let possibleMoves = [];\n      if(dx!==0) possibleMoves.push({x:e.x+dx, y:e.y});\n      if(dy!==0) possibleMoves.push({x:e.x, y:e.y+dy});\n      if(dx!==0 && dy!==0) possibleMoves.push({x:e.x+dx, y:e.y+dy});\n      possibleMoves = possibleMoves.filter(m=>isWalkable(m.x,m.y));\n      if(possibleMoves.length>0) {\n        let m = possibleMoves[0];\n        e.x = m.x;\n        e.y = m.y;\n      }\n    }\n  }\n\n  // Pick up item\n\n  function tryPickup() {\n    let item = items.find(i => i.x === player.x && i.y === player.y);\n    if(!item) {\n      log(\"Nothing here to pick up.\");\n      return;\n    }\n    player.inventory.push(item);\n    // Apply bonuses immediately to player if equip type\n    if(item.atkBonus) {\n      player.atk += item.atkBonus;\n      log(`You picked up a sword. Attack +${item.atkBonus}`);\n    }\n    if(item.defBonus) {\n      player.def += item.defBonus;\n      log(`You picked up armor. Defense +${item.defBonus}`);\n    }\n    items = items.filter(i => i !== item);\n    draw();\n  }\n\n  // Use a health potion from inventory\n  function tryUsePotion() {\n    let idx = player.inventory.findIndex(i=>i.name === \"Health Potion\");\n    if(idx === -1) {\n      log(\"You have no Health Potion to use.\");\n      return;\n    }\n    let potion = player.inventory[idx];\n    potion.effect(player);\n    player.inventory.splice(idx,1);\n    draw();\n  }\n\n  // Handle player move and interaction\n\n  function playerMove(dx, dy) {\n    if(player.hp <= 0) return; // dead\n    let nx = player.x + dx;\n    let ny = player.y + dy;\n    if(nx < 0 || ny < 0 || nx >= mapWidth || ny >= mapHeight) return;\n    if(map[ny][nx] === '#') return;\n\n    // Check enemy\n    let enemy = enemies.find(e=>e.x === nx && e.y === ny);\n    if(enemy) {\n      // attack instead of moving\n      let enemyKilled = playerAttack(enemy);\n      if(enemyKilled) {\n        draw();\n      }\n    } else {\n      player.x = nx;\n      player.y = ny;\n      draw();\n    }\n\n    // After move or attack, enemies take turn\n    if(enemies.length > 0) enemyTurn();\n\n    if(player.hp <= 0) {\n      log(\"You died! Refresh page to play again.\");\n    }\n    draw();\n  }\n\n  // Input handler\n\n  function keyHandler(e) {\n    e.preventDefault();\n\n    if(player.hp <= 0) return;\n\n    switch(e.key) {\n      case 'ArrowUp':\n      case 'w':\n      case 'W':\n        playerMove(0,-1);\n        break;\n      case 'ArrowDown':\n      case 's':\n      case 'S':\n        playerMove(0,1);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n      case 'A':\n        playerMove(-1,0);\n        break;\n      case 'ArrowRight':\n      case 'd':\n      case 'D':\n        playerMove(1,0);\n        break;\n      case 'g':\n      case 'G':\n        tryPickup();\n        break;\n      case 'u':\n      case 'U':\n        tryUsePotion();\n        break;\n    }\n  }\n\n  // Initialize game\n\n  function init() {\n    generateMap();\n    player.x = 1;\n    player.y = 1;\n    player.hp = player.maxHp;\n    player.atk = 5;\n    player.def = 2;\n    player.inventory = [];\n    populateEnemies(8);\n    populateItems(12);\n    draw();\n    log(\"Welcome to Mini Roguelike!\");\n    log(\"Move with arrows or WASD. Pick up items with G, use potion with U.\");\n  }\n\n  window.addEventListener('keydown', keyHandler);\n  init();\n\n})();\n</script>\n</body>\n</html>\n```"
    }
  ]
}